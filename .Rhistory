#' ## Create vintage and test
#' vintages<-create_vintages(df, periodicity = 4)
#' efficiencyModel1(vintages$diagonal_view)
#'
efficiencyModel1<-function(vintages.view, gap=1, na.zero=F){
q<-vintages.view
if(na.zero) q[is.na(q)]<-0
jq<-matrix_r2jd(q)
jef1<-try(.jcall("jdplus/revisions/base/r/Utility", "Ljdplus/toolkit/base/api/math/matrices/Matrix;", "efficiencyModel1", jq, as.integer(gap)),silent=T)
if("try-error" %in% class(jef1)){
warning("efficiencyModel1 could not be performed",call.=F)
return(NULL)
}
efficiencyModel1=matrix_jd2r(jef1)
efficiencyModel1[rowSums(efficiencyModel1[])==0,]<-NaN # fix non-calculable cases
if(all(is.nan(efficiencyModel1))){
warning("efficiencyModel1 could not be performed",call.=F)
return(NULL)
}
colnames(efficiencyModel1)<-OlsNames
n<-dim(q)[2]
w<-sapply(colnames(q), function(s){paste0('[', s, ']')})
rw<-mapply(function(a,b){paste(a,b,sep='-')}, w[(gap+1):n],w[1:(n-gap)])
rownames(efficiencyModel1)<-rw
return (efficiencyModel1)
}
#' Efficiency Model 2
#'
#' Linear regression model of Rv on R{v-1}
#'
#' @param vintages.view mts object. Vertical or diagonal view of the
#'                      [create_vintages()] output
#' @param gap Integer. Gap to consider between each vintages. Default is 1
#'            which means that revisions are calculated and tested for each
#'            vintages consecutively.
#' @param na.zero Boolean whether missing values should be considered as 0 or
#'                rather as data not (yet) available (the default).
#' @seealso [revision_analysis()], [get_report()] for more information on the tests
#'
#' @export
#'
#' @examples
#' ## Simulated data
#' period_range<-seq(as.Date('2011-01-01'),as.Date('2020-10-01'),by='quarter')
#' qtr<-(as.numeric(substr(period_range,6,7))+2)/3
#' time_period<-rep(paste0(format(period_range, "%Y"), "Q", qtr),5)
#' np<-length(period_range)
#' rev_date<-c(rep("2021-06-30",np), rep("2021-12-31",np), rep("2022-06-30",np),
#'             rep("2022-12-31",np), rep("2023-06-30",np))
#' set.seed(1)
#' xt<-cumsum(sample(rnorm(1000,0,1), np, TRUE))
#' rev<-rnorm(np*4,0,.1)
#' obs_values<-xt
#' for(i in 1:4){
#'   xt<-xt+rev[(1+(i-1)*np):(i*np)]
#'   obs_values<-c(obs_values,xt)
#' }
#' df<-data.frame(rev_date, time_period, obs_values)
#'
#' ## Create vintage and test
#' vintages<-create_vintages(df, periodicity = 4)
#' efficiencyModel2(vintages$diagonal_view)
#'
efficiencyModel2<-function(vintages.view, gap=1, na.zero=F){
q<-vintages.view
if(na.zero) q[is.na(q)]<-0
jq<-matrix_r2jd(q)
jef2<-try(.jcall("jdplus/revisions/base/r/Utility", "Ljdplus/toolkit/base/api/math/matrices/Matrix;", "efficiencyModel2", jq, as.integer(gap)),silent=T)
if("try-error" %in% class(jef2)){
warning("efficiencyModel2 could not be performed",call.=F)
return(NULL)
}
efficiencyModel2=matrix_jd2r(jef2)
if(length(efficiencyModel2)==0) {
warning("efficiencyModel2 could not be performed: Too few number of vintages",call.=F)
return(NULL)
}
efficiencyModel2[rowSums(efficiencyModel2[])==0,]<-NaN # fix non-calculable cases
if(all(is.nan(efficiencyModel2))){
warning("efficiencyModel2 could not be performed",call.=F)
return(NULL)
}
colnames(efficiencyModel2)<-OlsNames
n<-dim(q)[2]
w<-sapply(colnames(q), function(s){paste0('[', s, ']')})
rw<-mapply(function(a,b){paste(a,b,sep='-')}, w[(gap+1):n],w[1:(n-gap)])
rownames(efficiencyModel2)<-rw[-1]
return (efficiencyModel2)
}
#' Orthogonally Model 1
#'
#' Linear regression model of Rv on R_{v-1},...,R_{v-p}. (p=nrevs)
#'
#' @param revisions.view mts object. Vertical or diagonal view of the
#'                       [get_revisions()] output
#' @param nrevs Integer. Number of lags to consider.
#' @param na.zero Boolean whether missing values should be considered as 0 or
#'                rather as data not (yet) available (the default).
#' @seealso [revision_analysis()], [get_report()] for more information on the tests
#'
#' @export
#'
#' @examples
#' ## Simulated data
#' period_range<-seq(as.Date('2011-01-01'),as.Date('2020-10-01'),by='quarter')
#' qtr<-(as.numeric(substr(period_range,6,7))+2)/3
#' time_period<-rep(paste0(format(period_range, "%Y"), "Q", qtr),5)
#' np<-length(period_range)
#' rev_date<-c(rep("2021-06-30",np), rep("2021-12-31",np), rep("2022-06-30",np),
#'             rep("2022-12-31",np), rep("2023-06-30",np))
#' set.seed(1)
#' xt<-cumsum(sample(rnorm(1000,0,1), np, TRUE))
#' rev<-rnorm(np*4,0,.1)
#' obs_values<-xt
#' for(i in 1:4){
#'   xt<-xt+rev[(1+(i-1)*np):(i*np)]
#'   obs_values<-c(obs_values,xt)
#' }
#' df<-data.frame(rev_date, time_period, obs_values)
#'
#' ## Create vintage and test
#' vintages<-create_vintages(df, periodicity = 4)
#' revisions<-get_revisions(vintages, gap=1)
#' orthogonallyModel1(revisions$diagonal_view)
#'
orthogonallyModel1<-function(revisions.view, nrevs=1, na.zero=F){
r<-revisions.view
if(na.zero) r[is.na(r)]<-0
jr<-matrix_r2jd(as.matrix(r))
jom<-try(.jcall("jdplus/revisions/base/r/Utility", "Ljdplus/toolkit/base/api/math/matrices/Matrix;", "orthogonallyModel1", jr, as.integer(nrevs)),silent=T)
if("try-error" %in% class(jom)){
warning("orthogonallyModel1 could not be performed",call.=F)
return(NULL)
}
om=matrix_jd2r(jom)
if (length(om)==0) {
warning("orthogonallyModel1 could not be performed: Too few number of vintages",call.=F)
return(NULL)
}
om[rowSums(om[])==0,]<-NaN # fix non-calculable cases
if(all(is.nan(om))){
warning("orthogonallyModel1 could not be performed",call.=F)
return(NULL)
}
colnames(om)<-OlsAllNames(nrevs)
rownames(om)<-colnames(r[-c(1:nrevs)])
return (om)
}
#' Orthogonally Model 2
#'
#' Linear regression model of R_v on R_{v-k} (k = reference)
#'
#' @param revisions.view mts object. Vertical or diagonal view of the
#'                       [get_revisions()] output
#' @param reference Integer. Number of lags to consider.
#' @param na.zero Boolean whether missing values should be considered as 0 or
#'                rather as data not (yet) available (the default).
#' @seealso [revision_analysis()], [get_report()] for more information on the tests
#'
#' @export
#'
#' @examples
#' ## Simulated data
#' period_range<-seq(as.Date('2011-01-01'),as.Date('2020-10-01'),by='quarter')
#' qtr<-(as.numeric(substr(period_range,6,7))+2)/3
#' time_period<-rep(paste0(format(period_range, "%Y"), "Q", qtr),5)
#' np<-length(period_range)
#' rev_date<-c(rep("2021-06-30",np), rep("2021-12-31",np), rep("2022-06-30",np),
#'             rep("2022-12-31",np), rep("2023-06-30",np))
#' set.seed(1)
#' xt<-cumsum(sample(rnorm(1000,0,1), np, TRUE))
#' rev<-rnorm(np*4,0,.1)
#' obs_values<-xt
#' for(i in 1:4){
#'   xt<-xt+rev[(1+(i-1)*np):(i*np)]
#'   obs_values<-c(obs_values,xt)
#' }
#' df<-data.frame(rev_date, time_period, obs_values)
#'
#' ## Create vintage and test
#' vintages<-create_vintages(df, periodicity = 4)
#' revisions<-get_revisions(vintages, gap=1)
#' orthogonallyModel2(revisions$diagonal_view)
#'
orthogonallyModel2<-function(revisions.view, reference=1, na.zero=F){
r<-revisions.view
if(na.zero) r[is.na(r)]<-0
jr<-matrix_r2jd(as.matrix(r))
jom<-try(.jcall("jdplus/revisions/base/r/Utility", "Ljdplus/toolkit/base/api/math/matrices/Matrix;", "orthogonallyModel2", jr, as.integer(reference)),silent=T)
if("try-error" %in% class(jom)){
warning("orthogonallyModel2 could not be performed",call.=F)
return(NULL)
}
om=matrix_jd2r(jom)
if (length(om)==0) {
warning("orthogonallyModel2 could not be performed: Too few number of vintages",call.=F)
return(NULL)
}
om[rowSums(om[])==0,]<-NaN # fix non-calculable cases
if(all(is.nan(om))){
warning("orthogonallyModel2 could not be performed",call.=F)
return(NULL)
}
colnames(om)<-OlsNames
rownames(om)<-colnames(r)[-c(1:reference)]
return (om)
}
#' Signal VS Noise
#'
#' Linear regression models to determine whether revisions are ‘news’ or ‘noise’.
#' For 'noise': R (revisions) on P (preliminary estimate).
#' For 'news': R on L (latter estimate).
#'
#' @param vintages.view mts object. Vertical or diagonal view of the
#'                      [create_vintages()] output
#' @param gap Integer. Gap to consider between each vintages. Default is 1
#'            which means that revisions are calculated and tested for each
#'            vintages consecutively.
#' @param na.zero Boolean whether missing values should be considered as 0 or
#'                rather as data not (yet) available (the default).
#' @seealso [revision_analysis()], [get_report()] for more information on the tests
#'
#' @export
#'
#' @examples
#' ## Simulated data
#' period_range<-seq(as.Date('2011-01-01'),as.Date('2020-10-01'),by='quarter')
#' qtr<-(as.numeric(substr(period_range,6,7))+2)/3
#' time_period<-rep(paste0(format(period_range, "%Y"), "Q", qtr),5)
#' np<-length(period_range)
#' rev_date<-c(rep("2021-06-30",np), rep("2021-12-31",np), rep("2022-06-30",np),
#'             rep("2022-12-31",np), rep("2023-06-30",np))
#' set.seed(1)
#' xt<-cumsum(sample(rnorm(1000,0,1), np, TRUE))
#' rev<-rnorm(np*4,0,.1)
#' obs_values<-xt
#' for(i in 1:4){
#'   xt<-xt+rev[(1+(i-1)*np):(i*np)]
#'   obs_values<-c(obs_values,xt)
#' }
#' df<-data.frame(rev_date, time_period, obs_values)
#'
#' ## Create vintage and test
#' vintages<-create_vintages(df, periodicity = 4)
#' signalnoise(vintages$diagonal_view)
#'
signalnoise<-function(vintages.view, gap=1, na.zero=F){
q<-vintages.view
if(na.zero) q[is.na(q)]<-0
jq<-matrix_r2jd(q)
jsd<-try(.jcall("jdplus/revisions/base/r/Utility", "Ljdplus/toolkit/base/api/math/matrices/Matrix;", "signalNoise", jq, as.integer(gap)),silent=T)
if("try-error" %in% class(jsd)){
warning("signalnoise could not be performed",call.=F)
return(NULL)
}
sn<-matrix_jd2r(jsd)
sn[rowSums(sn[])==0,]<-NaN # fix non-calculable cases
if(all(is.nan(sn))){
warning("SignalNoise could not be performed",call.=F)
return(NULL)
}
colnames(sn)<-snNames
n<-dim(q)[2]
w<-sapply(colnames(q), function(s){paste0('[', s, ']')})
rw<-mapply(function(a,b){paste(a,b,sep='-')}, w[(gap+1):n],w[1:(n-gap)])
rownames(sn)<-rw
return (sn)
}
#' Unit root test
#'
#' @param vintages.view mts object. Vertical or diagonal view of the
#'                      [create_vintages()] output
#' @param adfk Number of lags to consider for Augmented Dicky-Fuller (ADF) test
#' @param na.zero Boolean whether missing values should be considered as 0 or
#'                rather as data not (yet) available (the default).
#' @seealso [revision_analysis()], [get_report()] for more information on the tests
#'
#' @export
#'
#' @examples
#' ## Simulated data
#' period_range<-seq(as.Date('2011-01-01'),as.Date('2020-10-01'),by='quarter')
#' qtr<-(as.numeric(substr(period_range,6,7))+2)/3
#' time_period<-rep(paste0(format(period_range, "%Y"), "Q", qtr),5)
#' np<-length(period_range)
#' rev_date<-c(rep("2021-06-30",np), rep("2021-12-31",np), rep("2022-06-30",np),
#'             rep("2022-12-31",np), rep("2023-06-30",np))
#' set.seed(1)
#' xt<-cumsum(sample(rnorm(1000,0,1), np, TRUE))
#' rev<-rnorm(np*4,0,.1)
#' obs_values<-xt
#' for(i in 1:4){
#'   xt<-xt+rev[(1+(i-1)*np):(i*np)]
#'   obs_values<-c(obs_values,xt)
#' }
#' df<-data.frame(rev_date, time_period, obs_values)
#'
#' ## Create vintage and test
#' vintages<-create_vintages(df, periodicity = 4)
#' unitroot(vintages$diagonal_view)
#'
unitroot<-function(vintages.view, adfk=1, na.zero=F){
q<-vintages.view
if(na.zero) q[is.na(q)]<-0
jq<-matrix_r2jd(q)
jsd<-try(.jcall("jdplus/revisions/base/r/Utility", "Ljdplus/toolkit/base/api/math/matrices/Matrix;", "unitroot", jq, as.integer(adfk)),silent=T)
if("try-error" %in% class(jsd)){
warning("unit root test could not be performed",call.=F)
return(NULL)
}
ur<-matrix_jd2r(jsd)
colnames(ur)<-urNames
rownames(ur)<-colnames(q)
return(ur)
}
#' Cointegration tests (Engle-Granger)
#'
#' @param vintages.view mts object. Vertical or diagonal view of the
#'                      [create_vintages()] output
#' @param adfk Number of lags to consider for ADF
#' @param na.zero Boolean whether missing values should be considered as 0 or
#'                rather as data not (yet) available (the default).
#' @seealso [revision_analysis()], [get_report()] for more information on the tests
#'
#' @export
#'
#' @examples
#' ## Simulated data
#' period_range<-seq(as.Date('2011-01-01'),as.Date('2020-10-01'),by='quarter')
#' qtr<-(as.numeric(substr(period_range,6,7))+2)/3
#' time_period<-rep(paste0(format(period_range, "%Y"), "Q", qtr),5)
#' np<-length(period_range)
#' rev_date<-c(rep("2021-06-30",np), rep("2021-12-31",np), rep("2022-06-30",np),
#'             rep("2022-12-31",np), rep("2023-06-30",np))
#' set.seed(1)
#' xt<-cumsum(sample(rnorm(1000,0,1), np, TRUE))
#' rev<-rnorm(np*4,0,.1)
#' obs_values<-xt
#' for(i in 1:4){
#'   xt<-xt+rev[(1+(i-1)*np):(i*np)]
#'   obs_values<-c(obs_values,xt)
#' }
#' df<-data.frame(rev_date, time_period, obs_values)
#'
#' ## Create vintage and test
#' vintages<-create_vintages(df, periodicity = 4)
#' cointegration(vintages$diagonal_view)
#'
cointegration<-function(vintages.view, adfk=1, na.zero=F){
q<-vintages.view
if(na.zero) q[is.na(q)]<-0
jq<-matrix_r2jd(q)
jsd<-try(.jcall("jdplus/revisions/base/r/Utility", "Ljdplus/toolkit/base/api/math/matrices/Matrix;", "cointegration", jq, as.integer(adfk)),silent=T)
if("try-error" %in% class(jsd)){
warning("cointegration test could not be performed",call.=F)
return(NULL)
}
eg<-matrix_jd2r(jsd)
colnames(eg)<-egNames
rownames(eg)<-get_rownames_diag(q, adfk)
return (eg)
}
#' Vector error correction model (VECM)
#'
#' Can lead to a better understanding of the nature of any nonstationary process
#' among the different component series.
#'
#' @param vintages.view mts object. Vertical or diagonal view of the
#'                      [create_vintages()] output
#' @param lag Number of lags
#' @param model Character. Must be "none" (the default), "cnt" or "trend".
#' @param na.zero Boolean whether missing values should be considered as 0 or
#'                rather as data not (yet) available (the default).
#' @export
#'
#' @examples
#' ## Simulated data
#' period_range<-seq(as.Date('2011-01-01'),as.Date('2020-10-01'),by='quarter')
#' qtr<-(as.numeric(substr(period_range,6,7))+2)/3
#' time_period<-rep(paste0(format(period_range, "%Y"), "Q", qtr),5)
#' np<-length(period_range)
#' rev_date<-c(rep("2021-06-30",np), rep("2021-12-31",np), rep("2022-06-30",np),
#'             rep("2022-12-31",np), rep("2023-06-30",np))
#' set.seed(1)
#' xt<-cumsum(sample(rnorm(1000,0,1), np, TRUE))
#' rev<-rnorm(np*4,0,.1)
#' obs_values<-xt
#' for(i in 1:4){
#'   xt<-xt+rev[(1+(i-1)*np):(i*np)]
#'   obs_values<-c(obs_values,xt)
#' }
#' df<-data.frame(rev_date, time_period, obs_values)
#'
#' ## Create vintage and test
#' vintages<-create_vintages(df, periodicity = 4)
#' vecm(vintages$diagonal_view)
#'
vecm<-function(vintages.view, lag=2, model = c("none", "cnt", "trend"), na.zero=F){
model<-match.arg(model)
q<-vintages.view
if(na.zero) q[is.na(q)]<-0
jq<-matrix_r2jd(q)
jsd<-try(.jcall("jdplus/revisions/base/r/Utility", "Ljdplus/toolkit/base/api/math/matrices/Matrix;", "vecm", jq, as.integer(lag), model),silent=T)
if("try-error" %in% class(jsd)){
warning("vecm could not be performed",call.=F)
return(NULL)
}
vecm<-matrix_jd2r(jsd)
colnames(vecm)<-vecmAllNames(lag)
rownames(vecm)<-get_rownames_diag(q, 1)
return (vecm)
}
# Auto-correlation tests on OLS residuals
#
# auto_correlation<-function(vintages.view, nbreuschgodfrey=1, nljungbox=1, na.zero=F){
#   q<-vintages.view
#   if(na.zero) q[is.na(q)]<-0
#   jq<-matrix_r2jd(q)
#   jsd<-try(.jcall("jdplus/revisions/base/r/Utility", "Ljdplus/toolkit/base/api/math/matrices/Matrix;", "autoCorrelation", jq
#                   , as.integer(nbreuschgodfrey), as.integer(nljungbox)),silent=T)
#   if("try-error" %in% class(jsd)){
#     warning("auto_correlation test on OLS residuals could not be performed",call.=F)
#     return(NULL)
#   }
#   ac<-matrix_jd2r(jsd)
#   colnames(ac)<-acNames
#   rownames(ac)<-get_rownames_diag(q, 1)
#   return (ac)
# }
source("E:/Documents/LEMASSO/r_own_packages/rjd3revisions/R/tests.R", encoding = 'UTF-8')
library(rjd3revisions)
?create_vintages
detach("package:rjd3revisions", unload = TRUE)
library(rjd3revisions)
?create_vintages
library(rjd3revisions)
?create_vintages
?create_vintages
library(rjd3revisions)
?create_vintages
?revision_analysis
library(rjd3revisions)
?create_vintages
library(rjd3revisions)
?create_vintages
library(rjd3revisions)
?create_vintages
install.packages("E:/Documents/LEMASSO/r_own_packages/rjd3revisions_1.0.0.tar.gz", repos = NULL, type = "source")
library(rjd3revisions)
?create_vintages
?create_vintages_from_xlsx
?get_revisions
?revision_analysis
source("E:/Documents/LEMASSO/r_own_packages/rjd3revisions/R/vintages.R", echo=TRUE)
library(rjd3revisions)
?create_vintages
rm(list = ls())
library(rjd3revisions)
?create_vintages
library(rjd3revisions)
library(rjd3revisions)
library(rjd3revisions)
library(rjd3revisions)
?create_vintages_from_csv
?create_vintages
library(rjd3revisions)
?create_vintages
?create_vintages_from_csv
?create_vintages_from_xlsx
library(rjd3revisions)
?create_vintages
library(rjd3revisions)
?create_vintages
library(rjd3revisions)
?create_vintages
library(rjd3revisions)
library(rjd3revisions)
library(rjd3revisions)
library(rjd3revisions)
?usethis::use_github
usethis::use_github(private = FALSE)
install.packages("gh")
usethis::use_github(private = FALSE)
usethis::use_github(private = FALSE)
usethis::use_github(private = FALSE)
usethis::use_github(private = FALSE)
usethis::use_github(private = FALSE)
usethis::use_git_remote("origin", url = NULL, overwrite = TRUE)
usethis::use_github(private = FALSE)
usethis::use_pkgdown_github_pages()
?plot
library(checkmate)
library(rJava)
library(rjd3toolkit)
library(knitr)
library(rmarkdown)
#Suggest:
library(readxl)
library(formattable)
library(kableExtra)
setwd("E:/Documents/LEMASSO/Revision analysis")
source("rjdrev-master/R/vintages.R")
library(rJava)
library(rjd3toolkit)
library(knitr)
library(rmarkdown)
#Suggest:
library(readxl)
library(formattable)
library(kableExtra)
source("R/vintages.R")
getwd()
