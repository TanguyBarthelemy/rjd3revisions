?create_vintages_from_csv
?create_vintages_from_xlsx
library(rjd3revisions)
?create_vintages
library(rjd3revisions)
?create_vintages
library(rjd3revisions)
?create_vintages
library(rjd3revisions)
library(rjd3revisions)
library(rjd3revisions)
library(rjd3revisions)
?usethis::use_github
usethis::use_github(private = FALSE)
install.packages("gh")
usethis::use_github(private = FALSE)
usethis::use_github(private = FALSE)
usethis::use_github(private = FALSE)
usethis::use_github(private = FALSE)
usethis::use_github(private = FALSE)
usethis::use_git_remote("origin", url = NULL, overwrite = TRUE)
usethis::use_github(private = FALSE)
usethis::use_pkgdown_github_pages()
?plot
library(checkmate)
library(rJava)
library(rjd3toolkit)
library(knitr)
library(rmarkdown)
#Suggest:
library(readxl)
library(formattable)
library(kableExtra)
setwd("E:/Documents/LEMASSO/Revision analysis")
source("rjdrev-master/R/vintages.R")
library(rJava)
library(rjd3toolkit)
library(knitr)
library(rmarkdown)
#Suggest:
library(readxl)
library(formattable)
library(kableExtra)
source("R/vintages.R")
getwd()
library(rJava)
library(rjd3toolkit)
library(knitr)
library(rmarkdown)
#Suggest:
library(readxl)
library(formattable)
library(kableExtra)
source("R/vintages.R")
source("R/revisions.R")
source("R/revision_analysis.R")
source("R/tests.R")
source("R/report.R")
source("R/output.R")
source("R/jd3_ts.R")
source("R/jd3_rslts.R")
data_all<-as.data.frame(read_excel("revision.xlsx", sheet = "pub3s"))
data_all<-as.data.frame(read_excel("E:\\Documents\\LEMASSO\\Revision analysis\\revision.xlsx", sheet = "pub3s"))
data_bop<-as.data.frame(read_excel("E:\\Documents\\LEMASSO\\Revision analysis\\revision_bop.xlsx", sheet = "X_biens"))
data_qna<-as.data.frame(read_excel("growth_rates_input.xlsx", sheet = "data"))
data_qna<-as.data.frame(read_excel("E:\\Documents\\LEMASSO\\Revision analysis\\growth_rates_input.xlsx", sheet = "data"))
library(data.table)
data_qna <- as.data.frame(melt(setDT(data_qna), id.vars = "REVDATE", variable.name = "TIME"))
#detach("package:data.table", unload=TRUE)
data_qna <-data_qna[order(data_qna$REVDATE),]
data_qna_short <- data_qna[3484:3913,]
data_gdp<-as.data.frame(read_excel("input QNA GDP.xlsx", sheet = "Sheet1"))
data_gdp<-as.data.frame(read_excel("E:\\Documents\\LEMASSO\\Revision analysis\\input QNA GDP.xlsx", sheet = "Sheet1"))
.jinit()
.jclassPath() # to see the .jar already accessible
.jaddClassPath()  # to add a new class -> use this for
# Run all GDP QoQ
vintages<-create_vintages(data_qna,4)
.jaddClassPath("E:\\Documents\\LEMASSO\\Revision analysis\\java\\jdplus-revisions-base-api-1.0.0-SNAPSHOT.jar")
.jaddClassPath("E:\\Documents\\LEMASSO\\Revision analysis\\java\\jdplus-revisions-base-core-1.0.0-SNAPSHOT.jar")
.jaddClassPath("E:\\Documents\\LEMASSO\\Revision analysis\\java\\jdplus-revisions-base-io-1.0.0-SNAPSHOT.jar")
.jaddClassPath("E:\\Documents\\LEMASSO\\Revision analysis\\java\\jdplus-revisions-base-r-1.0.0-SNAPSHOT.jar")
.jaddClassPath("E:\\Documents\\LEMASSO\\Revision analysis\\java\\jdplus-toolkit-base-api-3.0.0-SNAPSHOT.jar")
.jaddClassPath("E:\\Documents\\LEMASSO\\Revision analysis\\java\\jdplus-toolkit-base-core-3.0.0-SNAPSHOT.jar")
.jaddClassPath("E:\\Documents\\LEMASSO\\Revision analysis\\java\\jdplus-toolkit-base-r-3.0.0-SNAPSHOT.jar")
k = 0
sample = T
data<-x
# 4. Importing method in added .jar
periodicity<-4
# Run all GDP QoQ
vintages<-create_vintages(data_qna,4)
revisions<-get_revisions(vintages, gap=1)
rslt<-revision_analysis(vintages, gap=1, view="diagonal", n.releases = 3)
get_report(rslt)
get_report(rslt)
summary(rslt)
print(rslt)
plot(rslt)
class(revisions)
?get_report
??get_report
source("E:/Documents/LEMASSO/r_own_packages/rjd3revisions/R/revision_analysis.R", echo=TRUE)
revision_analysis(vintages, gap=1, view="diagonal", n.releases = 3)
vintages
gap = 1
view = "diagonal"
n.releases = 3
transf.diff = "auto"
transf.log = FALSE
descriptive.rounding = 3
nrevs = 1
ref = 1
na.zero=FALSE
n.releases <- min(n.releases, ncol(vintages$diagonal_view))
vt<-vintages$diagonal_view[, 1:n.releases]
vt
test<-get_vd_rev(vt, gap)
test
class(test)
test2<-get_revisions(vt, gap)
gap
rslt$revisions
x<-revisions
x["vertical_view"]
rev<-x[paste0(view,"_view")]
nc<-ncol(rev)
nc
rev
class(rev)
view
rev<-x[[paste0(view,"_view")]]
nc<-ncol(rev)
nc
if (nc>4) {
rev<-rev[, 1:4]
nc<-4
}
ts.plot(rev, gpars=list(xlab="", ylab="", col=c(1:nc), type="h", lwd=2, ...))
ts.plot(rev, gpars=list(xlab="", ylab="", col=c(1:nc), type="h", lwd=2))
legend("topleft", bty="n", lty=1, lwd=2, col=c(1:nc), legend=colnames(rev))
title(main = "Size of Revisions")
plot.JD3_RARevisions <- function(x, view = "vertical", nrev = 2, ...) {
rev <- x[[paste0(view,"_view")]]
nc <- min(nrev, ncol(rev))
rev<-rev[, 1:nc]
if(nc > 5){
nc<-5
warning("nrev must be <= 5. The maximum value was considered")
}
ts.plot(rev, gpars=list(xlab="", ylab="", col=c(1:nc), type="h", lwd=2, ...))
legend("topleft", bty="n", lty=1, lwd=2, col=c(1:nc), legend=colnames(rev))
title(main = "Revisions size")
}
source("E:/Documents/LEMASSO/r_own_packages/rjd3revisions/R/revisions.R", echo=TRUE)
source("E:/Documents/LEMASSO/r_own_packages/rjd3revisions/R/revisions.R", echo=TRUE)
revisions<-get_revisions(vintages, gap=1)
source("E:/Documents/LEMASSO/r_own_packages/rjd3revisions/R/revisions.R", echo=TRUE)
revisions<-get_revisions(vintages, gap=1)
plot(revisions)
plot(revisions, view = "diagonal")
## Revisions and Vintages Transformation
rv_notrf<-.get_revisions_view(vt, gap)
vintages
?efficiencyModel1
revisions
summary(revisions)
x<-revisions
print(x[,ncol(x)-n_col:ncol(x)])
n_col = 3
print(x[,ncol(x)-n_col:ncol(x)])
print(x[,(ncol(x)-n_col):ncol(x)])
x$vertical_view[,(ncol(x)-n_col):ncol(x)]
x$vertical_view
ncol(x$vertical_view)
ncol(x$diagonal_view)
print(x$vertical_view[,(n_col_tot-n_col):n_col_tot])
n_col_tot <- ncol(x$vertical_view)
print(x$vertical_view[,(n_col_tot-n_col):n_col_tot])
n_col_tot <- ncol(x$vertical_view)
n_row_tot <- nrow(x$vertical_view)
n_col <- min(n_col_tot, n_col)
n_row <- min(n_row_tot, n_row)
n_row = 12
n_row_tot <- nrow(x$vertical_view)
n_col <- min(n_col_tot, n_col)
n_row <- min(n_row_tot, n_row)
cat("Vertical view (extract):\n")
print(x$vertical_view[(n_row_tot-n_row+1):n_row_tot,
(n_col_tot-n_col+1):n_col_tot])
window(x$vertical_view[, (n_col_tot-n_col+1):n_col_tot], start = end(x$vertical_view) - 10)
end(x$vertical_view) - 10
print(ts(x$vertical_view[(n_row_tot-n_row+1):n_row_tot,
(n_col_tot-n_col+1):n_col_tot],
end = end(x$vertical_view)))
print(ts(x$vertical_view[(n_row_tot-n_row+1):n_row_tot,
(n_col_tot-n_col+1):n_col_tot],
frequency = frequency(x$vertical_view)
end = end(x$vertical_view)))
print(ts(x$vertical_view[(n_row_tot-n_row+1):n_row_tot,
(n_col_tot-n_col+1):n_col_tot],
freq = frequency(x$vertical_view)
end = end(x$vertical_view)))
print(ts(x$vertical_view[(n_row_tot-n_row+1):n_row_tot,
(n_col_tot-n_col+1):n_col_tot],
frequency = frequency(x$vertical_view),
end = end(x$vertical_view)))
x$horizontal_view
x$horizontal_view[(n_col_tot-n_col+1):n_col_tot,
(n_row_tot-n_row+1):n_row_tot]
print(ts(x$diagonal_view[(n_row_tot-n_row+1):n_row_tot,
(n_col_tot-n_col+1):n_col_tot],
frequency = frequency(x$vertical_view),
end = end(x$vertical_view)))
print(ts(x$diagonal_view[1:n_row,
1:n_col],
frequency = freq,
end = end_period))
freq <- frequency(x$vertical_view)
end_period <- end(x$vertical_view)
print(ts(x$diagonal_view[1:n_row,
1:n_col],
frequency = freq,
end = end_period))
print.JD3_RARevisions <- function(x, n_row = 12, n_col = 3, ...) {
n_col_tot <- ncol(x$vertical_view)
n_row_tot <- nrow(x$vertical_view)
n_col <- min(n_col_tot, n_col)
n_row <- min(n_row_tot, n_row)
freq <- frequency(x$vertical_view)
end_period <- end(x$vertical_view)
cat("Vertical view (extract):\n")
print(ts(x$vertical_view[(n_row_tot-n_row+1):n_row_tot,
(n_col_tot-n_col+1):n_col_tot],
frequency = freq,
end = end_period))
cat("\nHorizontal view (extract):\n")
x$horizontal_view[(n_col_tot-n_col+1):n_col_tot,
(n_row_tot-n_row+1):n_row_tot]
cat("\nDiagonal view (extract):\n")
print(ts(x$diagonal_view[1:n_row,
1:n_col],
frequency = freq,
end = end_period))
}
print(revisions)
print.JD3_RARevisions <- function(x, n_row = 12, n_col = 3, ...) {
n_col_tot <- ncol(x$vertical_view)
n_row_tot <- nrow(x$vertical_view)
n_col <- min(n_col_tot, n_col)
n_row <- min(n_row_tot, n_row)
freq <- frequency(x$vertical_view)
end_period <- end(x$vertical_view)
cat("Vertical view (extract):\n")
print(ts(x$vertical_view[(n_row_tot-n_row+1):n_row_tot,
(n_col_tot-n_col+1):n_col_tot],
frequency = freq,
end = end_period))
cat("\nHorizontal view (extract):\n")
print(x$horizontal_view[(n_col_tot-n_col+1):n_col_tot,
(n_row_tot-n_row+1):n_row_tot])
cat("\nDiagonal view (extract):\n")
print(ts(x$diagonal_view[1:n_row,
1:n_col],
frequency = freq,
end = end_period))
}
revisions
print.JD3_RARevisions <- function(x,
view = c("all", "vertical", "horizontal",
"diagonal"),
n_row = 12,
n_col = 3, ...) {
view <- match.arg(view)
n_col_tot <- ncol(x$vertical_view)
n_row_tot <- nrow(x$vertical_view)
n_col <- min(n_col_tot, n_col)
n_row <- min(n_row_tot, n_row)
freq <- frequency(x$vertical_view)
end_period <- end(x$vertical_view)
if(view %in% c("all", "vertical")){
cat("Extract vertical view :\n")
print(ts(x$vertical_view[(n_row_tot-n_row+1):n_row_tot,
(n_col_tot-n_col+1):n_col_tot],
frequency = freq,
end = end_period))
}
if(view %in% c("all", "horizontal")){
cat("\nExtract horizontal view:\n")
print(x$horizontal_view[(n_col_tot-n_col+1):n_col_tot,
(n_row_tot-n_row+1):n_row_tot])
}
if(view %in% c("all", "diagonal")){
cat("\nExtract diagonal view:\n")
print(ts(x$diagonal_view[1:n_row,
1:n_col],
frequency = freq,
end = end_period))
}
}
print(revisions, "diagonal")
revisions
?cat
summary.JD3_RARevisions <- function(x, ...) {
cat("Covered period:")
cat(paste0("\nFROM: ", start(x$vertical_view)))
cat(paste0("\nTO: ", start(x$vertical_view)))
# cat("\nLog-likelihood:")
# cat(x$log_likelihood)
#
#
# n_col_tot <- ncol(x$vertical_view)
# n_row_tot <- nrow(x$vertical_view)
# freq <- frequency(x$vertical_view)
#
# end_period <- end(x$vertical_view)
}
summary(x)
summary.JD3_RARevisions <- function(x, ...) {
cat("Covered period:")
cat(paste0("FROM: ", start(x$vertical_view)))
cat(paste0("TO: ", start(x$vertical_view)))
# cat("\nLog-likelihood:")
# cat(x$log_likelihood)
#
#
# n_col_tot <- ncol(x$vertical_view)
# n_row_tot <- nrow(x$vertical_view)
# freq <- frequency(x$vertical_view)
#
# end_period <- end(x$vertical_view)
}
summary(x)
summary.JD3_RARevisions <- function(x, ...) {
cat("Covered period:")
cat("\nFROM: ", start(x$vertical_view))
cat("\nTO: ", start(x$vertical_view))
# cat("\nLog-likelihood:")
# cat(x$log_likelihood)
#
#
# n_col_tot <- ncol(x$vertical_view)
# n_row_tot <- nrow(x$vertical_view)
# freq <- frequency(x$vertical_view)
#
# end_period <- end(x$vertical_view)
}
summary(x)
summary.JD3_RARevisions <- function(x, ...) {
cat("Covered period:")
cat("\nFrom: ", start(x$vertical_view))
cat("\nTo: ", end(x$vertical_view))
cat("\nFrequency: ", freq)
cat("\n")
cat("\nNumber of releases: ", ncol(x$vertical_view))
}
summary(xµ)
summary(x)
summary.JD3_RARevisions <- function(x, ...) {
cat("\Number of releases: ", ncol(x$vertical_view))
summary.JD3_RARevisions <- function(x, ...) {
cat("\Number of releases: ", ncol(x$vertical_view))
summary.JD3_RARevisions <- function(x, ...) {
cat("Number of releases: ", ncol(x$vertical_view))
cat("\nCovered period:\t")
cat("\nFrom: ", start(x$vertical_view))
cat("\nTo: ", end(x$vertical_view))
cat("\nFrequency: ", freq)
}
summary(x)
summary.JD3_RARevisions <- function(x, ...) {
cat("Number of releases: ", ncol(x$vertical_view))
cat("\nCovered period:")
cat("\n \t From: ", start(x$vertical_view))
cat("\n \t To: ", end(x$vertical_view))
cat("\nFrequency: ", freq)
}
summary(x)
summary.JD3_RARevisions <- function(x, ...) {
cat("Number of releases: ", ncol(x$vertical_view))
cat("\nCovered period:")
cat("\n \tFrom: ", start(x$vertical_view))
cat("\n \tTo: ", end(x$vertical_view))
cat("\nFrequency: ", freq)
}
summary(x)
plot.JD3_RARevisions <- function(x, view = "vertical", nrev = 2, ...) {
rev <- x[[paste0(view,"_view")]]
nc <- min(nrev, ncol(rev))
rev<-rev[, 1:nc]
if(nc > 5){
nc<-5
warning("nrev must be <= 5. The maximum value was considered")
}
ts.plot(rev, gpars=list(xlab="", ylab="", col=c(1:nc), type="h", lwd=2, ...))
legend("topleft", bty="n", lty=1, lwd=2, col=c(1:nc), legend=colnames(rev))
title(main = "Revisions size")
}
plot(revisions)
plot(x)
plot.JD3_RARevisions <- function(x, view = c("vertical", "horizontal", "diagonal"), n_rev = 2, ...) {
view <- match.arg(view)
if(view == "horizontal") view <- "vertical"
rev <- x[[paste0(view,"_view")]]
nc <- ncol(rev)
n_rev <- min(nrev, nc, 5)
if(view == "vertical"){
rev <- rev[, (nc-n_rev):nc]
}else{
rev <- rev[, 1:n_rev]
}
ts.plot(rev, gpars=list(xlab="", ylab="", col=c(1:nc), type="h", lwd=2, ...))
legend("topleft", bty="n", lty=1, lwd=2, col=c(1:nc), legend=colnames(rev))
title(main = "Revisions size")
}
plot(revisions)
plot.JD3_RARevisions <- function(x, view = c("vertical", "horizontal", "diagonal"), n_rev = 2, ...) {
view <- match.arg(view)
if(view == "horizontal") view <- "vertical"
rev <- x[[paste0(view,"_view")]]
nc <- ncol(rev)
n_rev <- min(n_rev, nc, 5)
if(view == "vertical"){
rev <- rev[, (nc-n_rev):nc]
}else{
rev <- rev[, 1:n_rev]
}
ts.plot(rev, gpars=list(xlab="", ylab="", col=c(1:nc), type="h", lwd=2, ...))
legend("topleft", bty="n", lty=1, lwd=2, col=c(1:nc), legend=colnames(rev))
title(main = "Revisions size")
}
plot(revisions)
plot.JD3_RARevisions <- function(x, view = c("vertical", "horizontal", "diagonal"), n_rev = 2, ...) {
view <- match.arg(view)
if(view == "horizontal") view <- "vertical"
rev <- x[[paste0(view,"_view")]]
nc <- ncol(rev)
n_rev <- min(n_rev, nc, 5)
if(view == "vertical"){
rev <- rev[, (nc-n_rev+1):nc]
}else{
rev <- rev[, 1:n_rev]
}
ts.plot(rev, gpars=list(xlab="", ylab="", col=c(1:nc), type="h", lwd=2, ...))
legend("topleft", bty="n", lty=1, lwd=2, col=c(1:nc), legend=colnames(rev))
title(main = "Revisions size")
}
plot(revisions)
revisions
vintages
plot(revisions, view = "diagonal")
plot(revisions, view = "horizontal")
plot(revisions, view = "diagonal", n_rev = 4)
summary.rjd3rev_vintages <- function(x, ...) {
cat("Number of releases: ", ncol(x$vertical_view))
cat("\nCovered period:")
cat("\n \tFrom: ", start(x$vertical_view))
cat("\n \tTo: ", end(x$vertical_view))
cat("\nFrequency: ", freq)
}
summary.rjd3rev_vintages <- function(x, ...) {
cat("Number of releases: ", ncol(x$vertical_view))
cat("\nCovered period:")
cat("\n \tFrom: ", start(x$vertical_view))
cat("\n \tTo: ", end(x$vertical_view))
cat("\nFrequency: ", freq)
}
summary(vintages)
print.rjd3rev_vintages <- function(x,
view = c("all", "vertical", "horizontal",
"diagonal"),
n_row = 12,
n_col = 3,
...) {
view <- match.arg(view)
n_col_tot <- ncol(x$vertical_view)
n_row_tot <- nrow(x$vertical_view)
n_col <- min(n_col_tot, n_col)
n_row <- min(n_row_tot, n_row)
freq <- frequency(x$vertical_view)
end_period <- end(x$vertical_view)
if(view %in% c("all", "vertical")){
cat("Vertical view (extract) :\n")
print(ts(x$vertical_view[(n_row_tot-n_row+1):n_row_tot,
(n_col_tot-n_col+1):n_col_tot],
frequency = freq,
end = end_period))
}
if(view %in% c("all", "horizontal")){
cat("\nHorizontal view (extract):\n")
print(x$horizontal_view[(n_col_tot-n_col+1):n_col_tot,
(n_row_tot-n_row+1):n_row_tot])
}
if(view %in% c("all", "diagonal")){
cat("\nDiagonal view (extract):\n")
print(ts(x$diagonal_view[1:n_row,
1:n_col],
frequency = freq,
end = end_period))
}
}
vintages
revisions
source("E:/Documents/LEMASSO/r_own_packages/rjd3revisions/R/revisions.R", echo=TRUE)
source("E:/Documents/LEMASSO/r_own_packages/rjd3revisions/R/vintages.R", echo=TRUE)
revisions
revisions
summary(revisions)
plot(revisions)
plot(revisions, view = "diagonal")
vintages
summary(vintages)
