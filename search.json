[{"path":"https://rjdemetra.github.io/rjd3revisions/articles/rjd3revisions.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"package performs revision analysis offers detailed summary output including generation visual report. composed selection parametric tests enable users detect potential bias (mean regression bias) sources inefficiency preliminary estimates. mean inefficiency preliminary estimates whether revisions predictable way. package uses efficient libraries JDemetra+ v3. built mostly based Eurostat’s technical reports D. Ares L. Pitton (2013). next section helps installation package. third section describes use tool give important details main functions. particular, important mention beforehand input data must first set specific format described sub-section input data. fourth section theoretical describes test performed main function revision_analysis() (also performed individually) interpret . Finally, find reference papers last section.","code":""},{"path":"https://rjdemetra.github.io/rjd3revisions/articles/rjd3revisions.html","id":"installation-settings","dir":"Articles","previous_headings":"","what":"Installation settings","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"package relies Java libraries JDemetra+ v3 package rjd3toolkit RJDemetra. Prior installation, must ensure Java version >= 17.0 computer. need use portable version Java fill request, can follow instructions installation manual RJDemetra. addition Java version >= 17.0, must recent version R packages rJava (>= 1.0.6) RProtobuf (>=0.4.17) can download CRAN. Depending current version R, might also need install another version Rtools. (>= 3.6). package also depends package rjd3toolkit must install GitHub prior rjd3revsions. Note depending R packages already installed computer, might also asked install re-install packages CRAN. Finally, package also suggests R packages formattable kableExtra (readxl import input data Excel) downloadable CRAN. invited install enhanced formatting output (.e., meaningful colors).","code":"remotes::install_github(\"rjdemetra/rjd3toolkit\") remotes::install_github(\"rjdemetra/rjd3revisions\")"},{"path":[]},{"path":"https://rjdemetra.github.io/rjd3revisions/articles/rjd3revisions.html","id":"input_format","dir":"Articles","previous_headings":"Usage","what":"Input data","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"input data must specific format taken reference documents Ares Pitton (2013). must specific column names date formats table . Note missing values can either mentioned NA (example ) included input best convenience user. Depending location input data, can use create_vintages_from_xlsx() create_vintages_from_csv(), generic function create_vintages() create vintages (see section vintages & revisions) later . plan use generic function, ’ll first need put input data data.frame R example .","code":"# Example input_df<-data.frame(rev_date = c(rep(\"2022-07-31\", 4), rep(\"2022-08-31\", 4),                                   rep(\"2022-09-30\", 4), rep(\"2022-10-31\", 4),                                   rep(\"2022-11-30\", 4), rep(\"2022-12-31\", 4),                                   rep(\"2023-01-31\", 4), rep(\"2023-02-28\", 4)),                     time_period = c(rep(c(\"2022Q1\", \"2022Q2\", \"2022Q3\", \"2022Q4\"), 8)),                     obs_values = c(.8, .2, NA, NA, .8, .1, NA, NA,                                    .7, .1, NA, NA, .7, .2, .5, NA,                                    .7, .2, .5, NA, .7, .3, .7, NA,                                    .7, .2, .7, .4, .7, .3, .7, .3))"},{"path":"https://rjdemetra.github.io/rjd3revisions/articles/rjd3revisions.html","id":"processing","dir":"Articles","previous_headings":"Usage","what":"Processing","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"input data right format, create vintages, possibly inspect revisions perform revision analysis Finally create report get summary results, can use","code":"library(\"rjd3revisions\") vintages<-create_vintages(input_df, periodicity = 4) # vintages<-create_vintages_from_xlsx(\"myinput.xlsx\", \"Sheet1\", periodicity=4, vintage.selection=NULL, revdate.format=\"%d/%m/%Y\") # vintages<-create_vintages_from_csv(\"myinput.csv\", periodicity=4, separator=\"\\t\", vintage.selection=NULL, revdate.format=\"%Y-%m-%d\") revisions<-get_revisions(vintages, gap = 1) rslt<-revision_analysis(vintages, gap = 1, view = \"diagonal\", n.releases = 3) get_report(rslt)  summary(rslt) print(rslt) plot(rslt)"},{"path":[]},{"path":"https://rjdemetra.github.io/rjd3revisions/articles/rjd3revisions.html","id":"vintages","dir":"Articles","previous_headings":"Usage > Details on the main functions","what":"Vintages & revisions","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"input data right format, must first create object class rjd3rev_vintages can run revision analysis. function create_vintages() (, alternatively, create_vintages_from_xlsx() create_vintages_from_csv()) create object input data display vintages considering three different data structures views: vertical, horizontal diagonal. vertical view shows observed values time period different vintages. approach robust changes base year data redefinition example used analyse revisions resulting benchmark revision. drawback approach comparing historical series different vintages, need look smallest common number observations consequently number observations circumstances small. Moreover, often case revision last points series number observations small test anything. Example vertical view horizontal view shows observed values different vintages period. quick analysis can performed rows order see data point (e.g. 2023Q1), figures first estimated, forecasted finally revised. main findings usually obvious: cases variance decreases, namely data converge towards ‘true value’. Horizontal tables just transpose vertical tables used tests ‘revision_analysis’. Example horizontal view diagonal view shows subsequent releases given time period, without regard date publication. advantage diagonal approach gives way analyse trade timing release accuracy published figures. particularly informative regular estimation intervals exist data study (case official statistics). However, approach requires particularly vigilant case change base year data redefinition. Example diagonal view Note argument function create_vintages(), argument vintage.selection allows limit range revision dates consider needed. See ?create_vintages details. Revisions easily calculated vintages choosing gap consider. function get_revisions() display revisions according view. just informative function need run prior revision analysis.","code":""},{"path":"https://rjdemetra.github.io/rjd3revisions/articles/rjd3revisions.html","id":"revision-analysis-reporting","dir":"Articles","previous_headings":"Usage > Details on the main functions","what":"Revision analysis & reporting","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"function revision_analysis() main function package. provides descriptive statistics performs battery parametric tests enable users detect potential bias (mean regression bias) sources inefficiency preliminary estimates. conclude inefficiency preliminary estimates revisions predictable way. Parametric tests divided 5 categories: relevancy (check whether preliminary estimates even worth ), bias, efficiency, orthogonality (correlation higher lags), signalVSnoise. function robust. reasons, test fails process, just skipped warning sent users possible cause failure. tests performed usual. parametric tests, prior transformation vintage data may important avoid misleading results. default, decision differentiate vintage data performed automatically based unit root co-integration tests. specifically, focus augmented Dickey-Fuller (ADF) test test presence unit root , cointegration, proceed ADF test residuals OLS regression two vintages. results tests also made available output function (section ‘varbased’). constrast, choice log-transformation left discretion users based knowledge series diagnostics various tests. default, log-transformation considered. part arguments revision_analysis() function, can choose view gap consider, restrict number releases investigation diagonal view selected /change default setting prior transformation data (including possibility add prior log-transformation data). function get_report() applied output revision_analysis() generate enhanced HTML report including formatted summary results full explanations tests (also included vignette ). formatted summary results display p-value test (except Theil’s tests value statistics provided) interpretation. appreciation ‘good’, ‘uncertain’, ‘bad’ ‘severe’ indeed associated test following usual statistical interpretation p-values orientation tests. allows quick visual interpretation results similar done GUI JDemetra+. addition function revision_analysis(), user can also perform tests individually want . list functions available package (therefore finding different functions corresponding individual tests), can Use help(‘name functions’) ?‘name functions’ information examples various functions.","code":"ls(\"package:rjd3revisions\")"},{"path":"https://rjdemetra.github.io/rjd3revisions/articles/rjd3revisions.html","id":"output","dir":"Articles","previous_headings":"Usage","what":"Output","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"detailed results test part output returned function revision_analysis(). Alternatively, functions associated individual test give result specific test. addition visual report can get applying function get_report() output function revision_analysis(), can also apply usual summary(), print() plot() functions output. function summary(), particular, print formatted table report main results. print() provide unformatted information together extra ones plot() plot revisions time.","code":""},{"path":"https://rjdemetra.github.io/rjd3revisions/articles/rjd3revisions.html","id":"tests-description-and-interpretation","dir":"Articles","previous_headings":"","what":"Tests description and interpretation","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"Recall purpose parametric tests described : check relevancy preliminary estimates detect potential mean regression bias measure efficiency preliminary estimates (.e., whether revisions somehow predictable)","code":""},{"path":[]},{"path":"https://rjdemetra.github.io/rjd3revisions/articles/rjd3revisions.html","id":"theils-inequality-coefficient","dir":"Articles","previous_headings":"Tests description and interpretation > Relevancy","what":"Theil’s Inequality Coefficient","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"context revision analysis, Theil’s inequality coefficient, also known Theil’s U, provides measure accuracy set preliminary estimates (P) compared latter version (L). exists definitions Theil’s statistics leading different interpretation results. package, two definitions considered. first statistic, U1, given \\[ U_1=\\frac{\\sqrt{\\frac{1}{n}\\sum^n_{t=1}(L_t-P_t)^2}}{\\sqrt{\\frac{1}{n}\\sum^n_{t=1}L_t^2}+\\sqrt{\\frac{1}{n}\\sum^n_{t=1}P_t^2}} \\\\ \\\\ \\] U1 bounded 0 1. closer value U1 zero, better forecast method. However, classic definition Theil’s statistic suffers number limitations. particular, set near zero preliminary estimates always give value U1 statistic close 1 even though close latter estimates. second statistic, U2, given \\[ U_2=\\frac{\\sqrt{\\sum^n_{t=1}\\left(\\frac{P_{t+1}-L_{t+1}}{L_t}\\right)^2}}{\\sqrt{\\sum^n_{t=1}\\left(\\frac{L_{t+1}-L_t}{L_t}\\right)^2}} \\] interpretation U2 differs U1. value 1 longer upper bound statistic threshold () preliminary estimates less () accurate naïve random walk forecast repeating last observed value (considering \\(P_{t+1}=L_t\\)). Whenever can calculated (\\(L_t \\neq 0 ~\\forall t\\)), U2 statistic preferred option evaluate relevancy preliminary estimates.","code":""},{"path":"https://rjdemetra.github.io/rjd3revisions/articles/rjd3revisions.html","id":"bias","dir":"Articles","previous_headings":"Tests description and interpretation","what":"Bias","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"bias preliminary estimates may indicate inaccurate initial data inefficient compilation methods. However, must cautious bias shown statistically significant intend correct . Biases may change overtime, might correct errors longer apply. long interval, changes methodology definitions may also occur valid reasons expect non-zero mean revision.","code":""},{"path":"https://rjdemetra.github.io/rjd3revisions/articles/rjd3revisions.html","id":"t-test-and-augmented-t-test","dir":"Articles","previous_headings":"Tests description and interpretation > Bias","what":"T-test and Augmented T-test","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"test whether mean revision statistically different zero sample n, employ conventional t-statistic \\[ t=\\frac{\\overline{R}}{\\sqrt{s^2/n}} \\] null hypothesis bias equal zero rejected, may give insight whether bias exists earlier estimates. t-test equivalent fitting linear regression revisions constant (.e. mean). Assumptions gaussianity revisions implied. One can release assumption autocorrelation adding model. Hence \\[ R_t=\\mu+\\varepsilon_t, ~~t=1,...,n \\] errors thought serially correlated according AR(1) model, \\[ \\varepsilon_t=\\gamma\\varepsilon_t+u_t, ~~~ |\\gamma|<1 ~~u_t \\sim{iid} \\] auto-correlation error terms reduces number independent observations (degrees freedom) factor \\(n\\frac{(1-\\gamma)}{(1+\\gamma)}\\) thus, variance mean adjusted upward accordingly. Hence, Augmented t-test calculated \\[ t_{adj}=\\frac{\\overline{R}}{\\sqrt{\\frac{s^2(1+\\hat{\\gamma})}{n(1-\\hat{\\gamma})}}} \\] \\[ \\hat{\\gamma}=\\frac{\\sum^{n-1}_{t=1}(R_t-\\overline{R})(R_{t+1}-\\overline{R})}{\\sum^n_{t=1}(R_t-\\overline{R})^2} \\]","code":""},{"path":"https://rjdemetra.github.io/rjd3revisions/articles/rjd3revisions.html","id":"slope-and-drift","dir":"Articles","previous_headings":"Tests description and interpretation > Bias","what":"Slope and drift","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"assume linear regression model latter vintage (L) preliminary vintage (P) estimate intercept (drift) \\(\\beta_0\\) slope coefficient \\(\\beta_1\\) OLS. model \\[ L_t=\\beta_0+\\beta_1P_t+\\varepsilon_t \\] (augmented) t-test revisions gives information mean bias, regression enables assess mean regression bias. regression bias occur, example, preliminary estimates tend low latter estimates relatively high high latter estimates relatively low. case, may result positive value intercept value \\(\\beta_1<1\\). evaluate whether mean regression bias present, employ conventional t-test parameters null hypothesis \\(\\beta_0 = 0\\) \\(\\hat{\\beta}_1 = 1\\). Recall OLS regressions always come along rather strict assumptions. Users check diagnostics draw necessary conclusions .","code":""},{"path":"https://rjdemetra.github.io/rjd3revisions/articles/rjd3revisions.html","id":"efficiency","dir":"Articles","previous_headings":"Tests description and interpretation","what":"Efficiency","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"Efficiency tests evaluate whether preliminary estimates “efficient” forecast latter estimates. information used efficiently time preliminary estimate, revisions predictable therefore neither correlated preliminary estimates display relationship one vintage another. section focuses two points. Predictability revisions tested even Orthogonality SignalVSNoise sections.","code":""},{"path":"https://rjdemetra.github.io/rjd3revisions/articles/rjd3revisions.html","id":"regression-of-revisions-on-previous-estimates","dir":"Articles","previous_headings":"Tests description and interpretation > Efficiency","what":"Regression of revisions on previous estimates","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"assume linear regression model revisions (R) preliminary vintage (P) estimate intercept \\(\\beta_0\\) slope coefficient \\(\\beta_1\\) OLS. model \\[ R_t=\\beta_0+\\beta_1P_t+\\varepsilon_t, ~~t=1,...,n \\] revisions affected preliminary estimates, means efficient improved. employ conventional t-test parameters null hypothesis \\(\\beta_0 = 0\\) \\(\\beta_1 = 0\\). Diagnostics residuals verified.","code":""},{"path":"https://rjdemetra.github.io/rjd3revisions/articles/rjd3revisions.html","id":"regression-of-revisions-from-latter-vintages-on-revisions-from-the-previous-vintages","dir":"Articles","previous_headings":"Tests description and interpretation > Efficiency","what":"Regression of revisions from latter vintages on revisions from the previous vintages","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"assume linear regression model revisions latter vintages (\\(R_v\\)) revisions previous vintages (\\(R_{v-1}\\)) estimate intercept \\(\\beta_0\\) slope coefficient \\(\\beta_1\\) OLS. model \\[ R_{v,t}=\\beta_0+\\beta_1R_{v-1,t}+\\varepsilon_t, ~~t=1,...,n \\] latter revisions predictable previous revisions, means preliminary estimates efficient improved. employ conventional t-test parameters null hypothesis \\(\\beta_0 = 0\\) \\(\\beta_1 = 0\\). Diagnostics residuals verified.","code":""},{"path":"https://rjdemetra.github.io/rjd3revisions/articles/rjd3revisions.html","id":"orthogonality","dir":"Articles","previous_headings":"Tests description and interpretation","what":"Orthogonality","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"Orthogonality tests evaluate whether revisions older vintages affect latter revisions. section also includes autocorrelation seasonality tests given set revisions. significant correlation revisions subsequent periods, may witness degree predictability revision process.","code":""},{"path":"https://rjdemetra.github.io/rjd3revisions/articles/rjd3revisions.html","id":"regression-of-latter-revisions-rv-on-previous-revisions-rv_1-rv_2rv_p","dir":"Articles","previous_headings":"Tests description and interpretation > Orthogonality","what":"Regression of latter revisions (Rv) on previous revisions (Rv_1, Rv_2,…Rv_p)","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"assume linear regression model revisions latter vintages (\\(R_v\\)) revisions p previous vintages (\\(R_{v-1}, ..., R_{v-p}\\)) estimate intercept \\(\\beta_0\\) slope coefficients \\(\\beta_1, ..., \\beta_p\\) OLS. model \\[ R_{v,t}=\\beta_0+\\sum^p_{=1}\\beta_{}R_{v-,t}+\\varepsilon_t, ~~t=1,...,n \\] latter revisions predictable previous revisions, means preliminary estimates efficient improved. employ conventional t-test intercept parameter null hypothesis \\(\\beta_0 = 0\\) F-test check null hypothesis \\(\\beta_1 = \\beta_2=...=\\beta_p=0\\). Diagnostics residuals verified","code":""},{"path":"https://rjdemetra.github.io/rjd3revisions/articles/rjd3revisions.html","id":"regression-of-latter-revisions-rv-on-revisions-from-a-specific-vintage-rv_k","dir":"Articles","previous_headings":"Tests description and interpretation > Orthogonality","what":"Regression of latter revisions (Rv) on revisions from a specific vintage (Rv_k)","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"assume linear regression model revisions latter vintages (\\(R_v\\)) revisions specific vintage (\\(R_{v-k}\\)) estimate intercept \\(\\beta_0\\) slope coefficient \\(\\beta_1\\) OLS. model \\[ R_{v,t}=\\beta_0+\\beta_1R_{v-k,t}+\\varepsilon_t, ~~t=1,...,n \\] latter revisions predictable previous revisions, means preliminary estimates efficient improved. employ conventional t-test parameters null hypothesis \\(\\beta_0 = 0\\) \\(\\beta_1 = 0\\). Diagnostics residuals verified.","code":""},{"path":"https://rjdemetra.github.io/rjd3revisions/articles/rjd3revisions.html","id":"test-of-autocorrelations-in-revisions","dir":"Articles","previous_headings":"Tests description and interpretation > Orthogonality","what":"Test of autocorrelations in revisions","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"test whether autocorrelation present revisions, employ Ljung-Box test. Ljung-Box test considers together group autocorrelation coefficients certain lag k therefore sometimes referred portmanteau test. purpose revision analysis, expect relatively small number observations, decided restrict number lags considered \\(k=2\\). Hence, users can also make distinction autocorrelation seasonal lags (see seasonality tests ). null hypothesis autocorrelation. test statistic given \\[ Q=n(n+2)\\sum^k_{=1}\\frac{\\hat{\\rho}_i^2}{n-} \\] n sample size, \\(\\hat{\\rho}_i^2\\) sample autocorrelation lag \\(k=2\\) number lags tested. null hypothesis, \\(Q\\sim\\chi^2(k)\\). Q statistically different zero, revision process may locally biased sense latter revisions related previous ones.","code":""},{"path":"https://rjdemetra.github.io/rjd3revisions/articles/rjd3revisions.html","id":"test-of-seasonality-in-revisions","dir":"Articles","previous_headings":"Tests description and interpretation > Orthogonality","what":"Test of seasonality in revisions","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"test whether seasonality present revisions, employ two tests: parametric QS test non-parametric Friedman test. Note seasonality tests always performed first-differentiated series avoid misleading results. QS test variant Ljung-Box test computed seasonal lags, consider positive auto-correlations \\[ QS=n(n+2)\\sum^k_{=1}\\frac{\\left[max(0,\\hat{\\gamma}_{.l})\\right]^2}{n-.l} \\] \\(k=2\\), first second seasonal lags considered. Thus, test checks correlation actual observation observations lagged one two years. Note \\(l=12\\) dealing monthly observations, consider auto-covariances \\(\\hat{\\gamma}_{12}\\) \\(\\hat{\\gamma}_{24}\\) alone. turn \\(k=4\\) case quarterly data. null hypothesis autocorrelation seasonal lags, \\(QS\\sim \\chi_{modified}^2(k)\\). elimination negative correlations calls indeed modified \\(\\chi^2\\) distribution. done using simulation techniques. Friedman test requires distributional assumptions. uses rankings observations. constructed follows. Consider first matrix data \\(\\{x_{ij}\\}_{nxk}\\) n rows (blocks, .e. number years sample), k columns (treatments, .e., either 12 months 4 quarters, depending frequency data). data matrix needs replaced new matrix \\(\\{r_{ij}\\}_{nxk}\\), entry \\(r_{ij}\\) rank \\(x_{ij}\\) within block . test statistic given \\[ Q=\\frac{n\\sum^k_{j=1}(\\tilde{r}_{.j}-\\tilde{r})^2}{\\frac{1}{n(k-1)}\\sum^n_{=1}\\sum^k_{j=1}(r_{ij}-\\tilde{r})^2} \\] denominator represents variance average ranking across treatments j relative total. null hypothesis (stable) seasonality, \\(Q\\sim \\chi^2(k-1)\\). non-seasonal autocorrelation tests lower lags, QS Q significantly different zero, revision process may locally biased sense latter revisions related previous ones.","code":""},{"path":"https://rjdemetra.github.io/rjd3revisions/articles/rjd3revisions.html","id":"signal-vs-noise","dir":"Articles","previous_headings":"Tests description and interpretation","what":"Signal vs Noise","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"Regression techniques can also used determine whether revisions classified ‘news’ ‘noise’. also closely related notion efficiency developed earlier. correlation revisions preliminary estimates significantly different zero, implies fully utilize information available time preliminary estimates. sense, conclude preliminary estimates better revisions embody noise. model test whether revisions “noise” similar first model established earlier test efficiency: \\[ R_t=\\beta_0+\\beta_1P_t+\\varepsilon_t, ~~t=1,...,n \\] employ F-test parameters test jointly \\(\\beta_0 = 0\\) \\(\\beta_1 = 0\\). null hypothesis rejected, suggest revisions likely include noise. Diagnostics residuals verified. hand, revisions correlated latter estimates. case, means information becomes available compilation preliminary latter estimates captured estimation process latter estimates. sense, revision process warranted conclude revisions embody news. model test whether revisions “news” \\[ R_t=\\beta_0+\\beta_1L_t+\\varepsilon_t, ~~t=1,...,n \\] employ F-test parameters test jointly \\(\\beta_0 = 0\\) \\(\\beta_1 = 0\\). null hypothesis rejected, good thing suggests revisions incorporate news. Note even reject null hypothesis conclude revisions incorporate news, necessarily mean revisions efficient might still predicted variables included estimation process.","code":""},{"path":"https://rjdemetra.github.io/rjd3revisions/articles/rjd3revisions.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"Ares, David. 2013. “Tool Revision Analysis : Technical Report.” DI/06769. DG ESTAT. Cook, Steve. 2019. “Forecast Evaluation Using Theil’s Inequality Coefficients.” Swansea University; https://www.economicsnetwork.ac.uk/showcase/cook_theil. Fixler, Dennis. 2007. “Interpret Whether Revisions Economic Variables Reflect ‘News’ ‘Noise’.” OECD. McKenzie, Richard, Michela Gamba. 2007. “Interpreting Results Revision Analyses: Recommended Summary Statistics.” OECD. Pitton, Laurent, David Ares. 2013a. “Tool Revision Analysis : Regression Based Parametric Analysis.” DI/06769. DG ESTAT. Pitton, Laurent, David Ares. 2013b. “Tool Revision Analysis : VAR Based Models Final Equation.” DI/06769. DG ESTAT. Smyk, Anna, Alain Quartier-la-Tente, Tanguy Barthelemy, Karsten Webel. 2023. “JDemetra+ Documentation.” INSEE; https://jdemetra-new-documentation.netlify.app/.","code":""},{"path":"https://rjdemetra.github.io/rjd3revisions/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Corentin Lemasson. Author, maintainer.","code":""},{"path":"https://rjdemetra.github.io/rjd3revisions/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lemasson C (2024). rjd3revisions: Revision analysis 'JDemetra+ 3.0'. R package version 1.1.0, https://rjdemetra.github.io/rjd3revisions/.","code":"@Manual{,   title = {rjd3revisions: Revision analysis with 'JDemetra+ 3.0'},   author = {Corentin Lemasson},   year = {2024},   note = {R package version 1.1.0},   url = {https://rjdemetra.github.io/rjd3revisions/}, }"},{"path":[]},{"path":"https://rjdemetra.github.io/rjd3revisions/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Revision analysis with JDemetra+ 3.0","text":"get current stable version (latest release): get current development version GitHub:","code":"# install.packages(\"remotes\") remotes::install_github(\"rjdemetra/rjd3toolkit@*release\") remotes::install_github(\"rjdemetra/rjd3revisions@*release\", build_vignettes = TRUE) # install.packages(\"remotes\") remotes::install_github(\"rjdemetra/rjd3revisions\", build_vignettes = TRUE)"},{"path":"https://rjdemetra.github.io/rjd3revisions/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Revision analysis with JDemetra+ 3.0","text":"First need get input data set data.frame R specific format . can create vintages, inspect revisions want make analysis Finally create report get summary results, can use","code":"# Example df <- data.frame(     rev_date = c(         rep(\"2022-07-31\", 4), rep(\"2022-08-31\", 4),         rep(\"2022-09-30\", 4), rep(\"2022-10-31\", 4),         rep(\"2022-11-30\", 4), rep(\"2022-12-31\", 4),         rep(\"2023-01-31\", 4), rep(\"2023-02-28\", 4)     ),     time_period = c(rep(c(\"2022Q1\", \"2022Q2\", \"2022Q3\", \"2022Q4\"), 8)),     obs_values = c(         .8, .2, NA, NA, .8, .1, NA, NA,         .7, .1, NA, NA, .7, .2, .5, NA,         .7, .2, .5, NA, .7, .3, .7, NA,         .7, .2, .7, .4, .7, .3, .7, .3     ) ) library(\"rjd3revisions\")  vintages <- create_vintages(df, periodicity = 4) # revisions<-get_revisions(vintages, gap = 2) rslt <- revision_analysis(vintages, gap = 1, view = \"diagonal\", n.releases = 3) get_report(rslt)  summary(rslt) print(rslt) plot(rslt)"},{"path":"https://rjdemetra.github.io/rjd3revisions/index.html","id":"additional-information","dir":"","previous_headings":"","what":"Additional information","title":"Revision analysis with JDemetra+ 3.0","text":"README.md file gives quick example proceed. Consult vignette (browseVignettes(\"rjd3revisions\")) documentation function (example: ?create_vintages, ?revision_analysis) see current possibilities tool.","code":""},{"path":"https://rjdemetra.github.io/rjd3revisions/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Revision analysis with JDemetra+ 3.0","text":"contribution welcome done pull requests /issues.","code":""},{"path":"https://rjdemetra.github.io/rjd3revisions/index.html","id":"licensing","dir":"","previous_headings":"","what":"Licensing","title":"Revision analysis with JDemetra+ 3.0","text":"code project licensed European Union Public Licence (EUPL).","code":""},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/bias.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate bias using t-test and augmented t-test — bias","title":"Estimate bias using t-test and augmented t-test — bias","text":"Estimate bias using t-test augmented t-test","code":""},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/bias.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate bias using t-test and augmented t-test — bias","text":"","code":"bias(revisions.view, na.zero = FALSE)"},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/bias.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate bias using t-test and augmented t-test — bias","text":"revisions.view mts object. Vertical diagonal view `get_revisions()` output na.zero Boolean whether missing values considered 0 rather data (yet) available (default).","code":""},{"path":[]},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/bias.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate bias using t-test and augmented t-test — bias","text":"","code":"## Simulated data period_range<-seq(as.Date('2011-01-01'),as.Date('2020-10-01'),by='quarter') qtr<-(as.numeric(substr(period_range,6,7))+2)/3 time_period<-rep(paste0(format(period_range, \"%Y\"), \"Q\", qtr),5) np<-length(period_range) rev_date<-c(rep(\"2021-06-30\",np), rep(\"2021-12-31\",np), rep(\"2022-06-30\",np),             rep(\"2022-12-31\",np), rep(\"2023-06-30\",np)) set.seed(1) xt<-cumsum(sample(rnorm(1000,0,1), np, TRUE)) rev<-rnorm(np*4,0,.1) obs_values<-xt for(i in 1:4) {   xt<-xt+rev[(1+(i-1)*np):(i*np)]   obs_values<-c(obs_values,xt) } df<-data.frame(rev_date, time_period, obs_values)  ## Create vintage and test vintages<-create_vintages(df, periodicity = 4) #> Error in create_vintages.default(df, periodicity = 4): The function requires a data.frame, a matrix or a mts object! revisions<-get_revisions(vintages, gap=1) #> Error in eval(expr, envir, enclos): object 'vintages' not found bias(revisions$diagonal_view) #> Error in eval(expr, envir, enclos): object 'revisions' not found"},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/cointegration.html","id":null,"dir":"Reference","previous_headings":"","what":"Cointegration tests (Engle-Granger) — cointegration","title":"Cointegration tests (Engle-Granger) — cointegration","text":"Cointegration tests (Engle-Granger)","code":""},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/cointegration.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cointegration tests (Engle-Granger) — cointegration","text":"","code":"cointegration(vintages.view, adfk = 1, na.zero = FALSE)"},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/cointegration.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cointegration tests (Engle-Granger) — cointegration","text":"vintages.view mts object. Vertical diagonal view `create_vintages()` output adfk Number lags consider ADF na.zero Boolean whether missing values considered 0 rather data (yet) available (default).","code":""},{"path":[]},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/cointegration.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cointegration tests (Engle-Granger) — cointegration","text":"","code":"## Simulated data period_range<-seq(as.Date('2011-01-01'),as.Date('2020-10-01'),by='quarter') qtr<-(as.numeric(substr(period_range,6,7))+2)/3 time_period<-rep(paste0(format(period_range, \"%Y\"), \"Q\", qtr),5) np<-length(period_range) rev_date<-c(rep(\"2021-06-30\",np), rep(\"2021-12-31\",np), rep(\"2022-06-30\",np),             rep(\"2022-12-31\",np), rep(\"2023-06-30\",np)) set.seed(1) xt<-cumsum(sample(rnorm(1000,0,1), np, TRUE)) rev<-rnorm(np*4,0,.1) obs_values<-xt for(i in 1:4) {   xt<-xt+rev[(1+(i-1)*np):(i*np)]   obs_values<-c(obs_values,xt) } df<-data.frame(rev_date, time_period, obs_values)  ## Create vintage and test vintages<-create_vintages(df, periodicity = 4) #> Error in create_vintages.default(df, periodicity = 4): The function requires a data.frame, a matrix or a mts object! cointegration(vintages$diagonal_view) #> Error in eval(expr, envir, enclos): object 'vintages' not found"},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/create_vintages.html","id":null,"dir":"Reference","previous_headings":"","what":"Create vintage tables — create_vintages","title":"Create vintage tables — create_vintages","text":"Create vintage tables data.frame, matrix mts object R","code":""},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/create_vintages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create vintage tables — create_vintages","text":"","code":"create_vintages(x, ...)"},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/create_vintages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create vintage tables — create_vintages","text":"x formatted object containing input. can type `data.frame`, `matrix` `mts` must represent one multiple vintage views (selected argument `type`. type character specifying type representation input `\"long\"`, `\"horizontal\"` `\"vertical\"` approach. periodicity periodicity time period (12, 4 1 resp. monthly,quarterly annual data) date_format character string corresponding format used input data.frame revision dates.","code":""},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/create_vintages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create vintage tables — create_vintages","text":"object class `rjd3rev_vintages` contains four different view revision","code":""},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/create_vintages.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create vintage tables — create_vintages","text":"input data.frame, function displays vintages considering three different data structures views: vertical, horizontal diagonal. See `details` section information different views. function returns object class `rjd3rev_vintages` can used input main function `revision_analysis`. four different vintage views: 1. vertical view shows observed values time period different vintages. approach robust changes base year data redefinition. drawback approach comparing historical series different vintages, need look smallest common number observations consequently number observations circumstances small. Moreover, often case revision last points series number observations small test anything. 2. horizontal view shows observed values different vintages period. quick analysis can performed rows order see data point (e.g. 2023Q1), figures first estimated, forecasted finally revised. main findings usually obvious: cases variance decreases, namely data converge towards 'true value'. Horizontal tables just transpose vertical tables used tests `revision_analysis`. 3. diagonal view shows subsequent releases given time period, without regard date publication. advantage diagonal approach gives way analyse trade timing release accuracy published figures. particularly informative regular estimation intervals exist data study. However, approach requires particularly vigilant case change base year data redefinition. 4. long view representation data allows information grouped together order facilitate manipulation. 3 columns (1 column time period, 1 column publication / revision date one column data), representation allows efficient non-redundant storage data.","code":""},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/create_vintages.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create vintage tables — create_vintages","text":"","code":"## creating the input df <- data.frame(rev_date = c(rep(\"2022-07-31\",4), rep(\"2022-08-31\",4),                               rep(\"2022-09-30\",4), rep(\"2022-10-31\",4),                               rep(\"2022-11-30\",4), rep(\"2022-12-31\",4),                               rep(\"2023-01-31\",4), rep(\"2023-02-28\",4)),                  time_period = c(rep(c(\"2022Q1\",\"2022Q2\",\"2022Q3\",\"2022Q4\"),8)),                  obs_value = c(.8,.2,NA,NA, .8,.1,NA,NA,                                .7,.1,NA,NA, .7,.2,.5,NA,                                .7,.2,.5,NA, .7,.3,.7,NA,                                .7,.2,.7,.4, .7,.3,.7,.3)) vintages <- create_vintages(x = df, type = \"long\", periodicity = 4L) #> Error in create_vintages.default(x = df, type = \"long\", periodicity = 4L): The function requires a data.frame, a matrix or a mts object!  ## specifying the format of revision dates vintages <- create_vintages(     x = df,     type =\"long\",     periodicity = 4L,     date_format= \"%Y-%m-%d\" ) #> Error in create_vintages.default(x = df, type = \"long\", periodicity = 4L,     date_format = \"%Y-%m-%d\"): The function requires a data.frame, a matrix or a mts object!"},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/create_vintages_from_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Create vintages table from CSV or TXT files — create_vintages_from_csv","title":"Create vintages table from CSV or TXT files — create_vintages_from_csv","text":"Create vintages table CSV TXT files","code":""},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/create_vintages_from_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create vintages table from CSV or TXT files — create_vintages_from_csv","text":"","code":"create_vintages_from_csv(   file,   type = c(\"long\", \"horizontal\", \"vertical\"),   periodicity = c(4L, 12L, 1L),   date_format = \"%Y-%m-%d\",   ... )"},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/create_vintages_from_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create vintages table from CSV or TXT files — create_vintages_from_csv","text":"file character containing name file data read . type character specifying type representation input `\"long\"`, `\"horizontal\"` `\"vertical\"` approach. periodicity periodicity time period (12, 4 1 resp. monthly,quarterly annual data) date_format character string corresponding format used input data.frame revision dates. ... Arguments passed `read.csv()`, example: * `sep` field separator character * `dec` character used file decimal points. * `row.names` vector row names * `skip` integer, number lines data file skip beginning read data. * `...`","code":""},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/create_vintages_from_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create vintages table from CSV or TXT files — create_vintages_from_csv","text":"object class `rjd3rev_vintages`","code":""},{"path":[]},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/create_vintages_from_csv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create vintages table from CSV or TXT files — create_vintages_from_csv","text":"","code":"if (FALSE) { file_name <- \"myinput.csv\" vintages <- create_vintages_from_csv(     file = file_name,     type = \"vertical\",     periodicity = 12,     date_format = \"%Y-%m-%d\",     sep = \";\" ) }"},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/create_vintages_from_xlsx.html","id":null,"dir":"Reference","previous_headings":"","what":"Create vintages table from XLSX files — create_vintages_from_xlsx","title":"Create vintages table from XLSX files — create_vintages_from_xlsx","text":"Create vintages table XLSX files","code":""},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/create_vintages_from_xlsx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create vintages table from XLSX files — create_vintages_from_xlsx","text":"","code":"create_vintages_from_xlsx(   file,   type = c(\"long\", \"horizontal\", \"vertical\"),   periodicity = c(4L, 12L, 1L),   date_format = \"%Y-%m-%d\",   ... )"},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/create_vintages_from_xlsx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create vintages table from XLSX files — create_vintages_from_xlsx","text":"file character containing name file data read . type character specifying type representation input `\"long\"`, `\"horizontal\"` `\"vertical\"` approach. periodicity periodicity time period (12, 4 1 resp. monthly,quarterly annual data) date_format character string corresponding format used input data.frame revision dates. ... Arguments passed `readxl::read_excel()`, example: * `sheet` character containing sheet read * `range` cell range read * `col_names` boolean use first row column names * `...`","code":""},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/create_vintages_from_xlsx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create vintages table from XLSX files — create_vintages_from_xlsx","text":"object class `rjd3rev_vintages`","code":""},{"path":[]},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/create_vintages_from_xlsx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create vintages table from XLSX files — create_vintages_from_xlsx","text":"","code":"if (FALSE) { file_name <- \"myinput.xlsx\" sheet_name <- \"Sheet1\" vintages <- create_vintages_from_xlsx(     file = file_name,     type = \"horizontal\",     periodicity = 12L,     sheet = sheet_name ) }"},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/descriptive_statistics.html","id":null,"dir":"Reference","previous_headings":"","what":"Descriptive statistics — descriptive_statistics","title":"Descriptive statistics — descriptive_statistics","text":"Descriptive statistics","code":""},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/descriptive_statistics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Descriptive statistics — descriptive_statistics","text":"","code":"descriptive_statistics(revisions.view, rounding = 3)"},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/descriptive_statistics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Descriptive statistics — descriptive_statistics","text":"revisions.view mts object. Vertical diagonal view `get_revisions()` output rounding number decimals display","code":""},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/descriptive_statistics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Descriptive statistics — descriptive_statistics","text":"","code":"## Simulated data period_range<-seq(as.Date('2011-01-01'),as.Date('2020-10-01'),by='quarter') qtr<-(as.numeric(substr(period_range,6,7))+2)/3 time_period<-rep(paste0(format(period_range, \"%Y\"), \"Q\", qtr),5) np<-length(period_range) rev_date<-c(rep(\"2021-06-30\",np), rep(\"2021-12-31\",np), rep(\"2022-06-30\",np),             rep(\"2022-12-31\",np), rep(\"2023-06-30\",np)) set.seed(1) xt<-cumsum(sample(rnorm(1000,0,1), np, TRUE)) rev<-rnorm(np*4,0,.1) obs_values<-xt for(i in 1:4) {   xt<-xt+rev[(1+(i-1)*np):(i*np)]   obs_values<-c(obs_values,xt) } df<-data.frame(rev_date, time_period, obs_values)  ## Create vintage and get descriptive statistics of revisions vintages<-create_vintages(df, periodicity = 4) #> Error in create_vintages.default(df, periodicity = 4): The function requires a data.frame, a matrix or a mts object! revisions<-get_revisions(vintages, gap=1) #> Error in eval(expr, envir, enclos): object 'vintages' not found descriptive_statistics(revisions$diagonal_view, rounding=1) #> Error in eval(expr, envir, enclos): object 'revisions' not found"},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/efficiencyModel1.html","id":null,"dir":"Reference","previous_headings":"","what":"Efficiency Model 1 — efficiencyModel1","title":"Efficiency Model 1 — efficiencyModel1","text":"Linear regression model revisions (R) preliminary vintage (P)","code":""},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/efficiencyModel1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Efficiency Model 1 — efficiencyModel1","text":"","code":"efficiencyModel1(vintages.view, gap = 1, na.zero = FALSE)"},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/efficiencyModel1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Efficiency Model 1 — efficiencyModel1","text":"vintages.view mts object. Vertical diagonal view `create_vintages()` output gap Integer. Gap consider vintages. Default 1 means revisions calculated tested vintages consecutively. na.zero Boolean whether missing values considered 0 rather data (yet) available (default).","code":""},{"path":[]},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/efficiencyModel1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Efficiency Model 1 — efficiencyModel1","text":"","code":"## Simulated data period_range<-seq(as.Date('2011-01-01'),as.Date('2020-10-01'),by='quarter') qtr<-(as.numeric(substr(period_range,6,7))+2)/3 time_period<-rep(paste0(format(period_range, \"%Y\"), \"Q\", qtr),5) np<-length(period_range) rev_date<-c(rep(\"2021-06-30\",np), rep(\"2021-12-31\",np), rep(\"2022-06-30\",np),             rep(\"2022-12-31\",np), rep(\"2023-06-30\",np)) set.seed(1) xt<-cumsum(sample(rnorm(1000,0,1), np, TRUE)) rev<-rnorm(np*4,0,.1) obs_values<-xt for(i in 1:4) {   xt<-xt+rev[(1+(i-1)*np):(i*np)]   obs_values<-c(obs_values,xt) } df<-data.frame(rev_date, time_period, obs_values)  ## Create vintage and test vintages<-create_vintages(df, periodicity = 4) #> Error in create_vintages.default(df, periodicity = 4): The function requires a data.frame, a matrix or a mts object! efficiencyModel1(vintages$diagonal_view) #> Error in eval(expr, envir, enclos): object 'vintages' not found"},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/efficiencyModel2.html","id":null,"dir":"Reference","previous_headings":"","what":"Efficiency Model 2 — efficiencyModel2","title":"Efficiency Model 2 — efficiencyModel2","text":"Linear regression model Rv Rv-1","code":""},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/efficiencyModel2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Efficiency Model 2 — efficiencyModel2","text":"","code":"efficiencyModel2(vintages.view, gap = 1, na.zero = FALSE)"},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/efficiencyModel2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Efficiency Model 2 — efficiencyModel2","text":"vintages.view mts object. Vertical diagonal view `create_vintages()` output gap Integer. Gap consider vintages. Default 1 means revisions calculated tested vintages consecutively. na.zero Boolean whether missing values considered 0 rather data (yet) available (default).","code":""},{"path":[]},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/efficiencyModel2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Efficiency Model 2 — efficiencyModel2","text":"","code":"## Simulated data period_range<-seq(as.Date('2011-01-01'),as.Date('2020-10-01'),by='quarter') qtr<-(as.numeric(substr(period_range,6,7))+2)/3 time_period<-rep(paste0(format(period_range, \"%Y\"), \"Q\", qtr),5) np<-length(period_range) rev_date<-c(rep(\"2021-06-30\",np), rep(\"2021-12-31\",np), rep(\"2022-06-30\",np),             rep(\"2022-12-31\",np), rep(\"2023-06-30\",np)) set.seed(1) xt<-cumsum(sample(rnorm(1000,0,1), np, TRUE)) rev<-rnorm(np*4,0,.1) obs_values<-xt for(i in 1:4) {   xt<-xt+rev[(1+(i-1)*np):(i*np)]   obs_values<-c(obs_values,xt) } df<-data.frame(rev_date, time_period, obs_values)  ## Create vintage and test vintages<-create_vintages(df, periodicity = 4) #> Error in create_vintages.default(df, periodicity = 4): The function requires a data.frame, a matrix or a mts object! efficiencyModel2(vintages$diagonal_view) #> Error in eval(expr, envir, enclos): object 'vintages' not found"},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/get_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate report on Revision Analysis — get_report","title":"Generate report on Revision Analysis — get_report","text":"Generate report Revision Analysis","code":""},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/get_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate report on Revision Analysis — get_report","text":"","code":"get_report(rslt, path.out = NULL, open.report = TRUE)"},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/get_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate report on Revision Analysis — get_report","text":"rslt object class `\"rjd3rev_vintages\"` output function `revision_analysis()` path.path output HTML file containing report. Default NULL meaning report saved working directory generic name. open.report Boolean. Default TRUE meaning report open automatically generated.","code":""},{"path":[]},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/get_report.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate report on Revision Analysis — get_report","text":"","code":"## Simulated data period_range<-seq(as.Date('2011-01-01'),as.Date('2020-10-01'),by='quarter') qtr<-(as.numeric(substr(period_range,6,7))+2)/3 time_period<-rep(paste0(format(period_range, \"%Y\"), \"Q\", qtr),5) np<-length(period_range) rev_date<-c(rep(\"2021-06-30\",np), rep(\"2021-12-31\",np), rep(\"2022-06-30\",np),             rep(\"2022-12-31\",np), rep(\"2023-06-30\",np)) set.seed(1) xt<-cumsum(sample(rnorm(1000,0,1), np, TRUE)) rev<-rnorm(np*4,0,.1) obs_values<-xt for(i in 1:4){   xt<-xt+rev[(1+(i-1)*np):(i*np)]   obs_values<-c(obs_values,xt) } df<-data.frame(rev_date, time_period, obs_values)  ## Make analysis and generate the report vintages<-create_vintages(df, periodicity = 4) #> Error in create_vintages.default(df, periodicity = 4): The function requires a data.frame, a matrix or a mts object! rslt<-revision_analysis(vintages, view = \"diagonal\") #> Error in eval(expr, envir, enclos): object 'vintages' not found if (FALSE) { get_report(rslt) }"},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/get_revisions.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate revisions from vintages — get_revisions","title":"Calculate revisions from vintages — get_revisions","text":"Calculate revisions vintages","code":""},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/get_revisions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate revisions from vintages — get_revisions","text":"","code":"get_revisions(vintages, gap = 1)"},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/get_revisions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate revisions from vintages — get_revisions","text":"vintages object class `\"rjd3rev_vintages\"` gap Integer. Gap consider vintages calculate revision. Default 1 means revisions calculated vintages consecutively.","code":""},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/get_revisions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate revisions from vintages — get_revisions","text":"list revisions calculated three vintage views","code":""},{"path":[]},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/get_revisions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate revisions from vintages — get_revisions","text":"","code":"df<-data.frame(rev_date = c(rep(\"2022-07-31\",4), rep(\"2022-08-31\",4),                             rep(\"2022-09-30\",4), rep(\"2022-10-31\",4),                             rep(\"2022-11-30\",4), rep(\"2022-12-31\",4),                             rep(\"2023-01-31\",4), rep(\"2023-02-28\",4)),                  time_period = c(rep(c(\"2022Q1\",\"2022Q2\",\"2022Q3\",\"2022Q4\"),8)),                  obs_values = c(.8,.2,NA,NA, .8,.1,NA,NA,                                 .7,.1,NA,NA, .7,.2,.5,NA,                                 .7,.2,.5,NA, .7,.3,.7,NA,                                 .7,.2,.7,.4, .7,.3,.7,.3)) vintages<-create_vintages(df, periodicity = 4) #> Error in create_vintages.default(df, periodicity = 4): The function requires a data.frame, a matrix or a mts object! revisions<-get_revisions(vintages, gap=1) #> Error in eval(expr, envir, enclos): object 'vintages' not found"},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/orthogonallyModel1.html","id":null,"dir":"Reference","previous_headings":"","what":"Orthogonally Model 1 — orthogonallyModel1","title":"Orthogonally Model 1 — orthogonallyModel1","text":"Linear regression model Rv R_v-1,...,R_v-p. (p=nrevs)","code":""},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/orthogonallyModel1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Orthogonally Model 1 — orthogonallyModel1","text":"","code":"orthogonallyModel1(revisions.view, nrevs = 1, na.zero = FALSE)"},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/orthogonallyModel1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Orthogonally Model 1 — orthogonallyModel1","text":"revisions.view mts object. Vertical diagonal view `get_revisions()` output nrevs Integer. Number lags consider. na.zero Boolean whether missing values considered 0 rather data (yet) available (default).","code":""},{"path":[]},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/orthogonallyModel1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Orthogonally Model 1 — orthogonallyModel1","text":"","code":"## Simulated data period_range<-seq(as.Date('2011-01-01'),as.Date('2020-10-01'),by='quarter') qtr<-(as.numeric(substr(period_range,6,7))+2)/3 time_period<-rep(paste0(format(period_range, \"%Y\"), \"Q\", qtr),5) np<-length(period_range) rev_date<-c(rep(\"2021-06-30\",np), rep(\"2021-12-31\",np), rep(\"2022-06-30\",np),             rep(\"2022-12-31\",np), rep(\"2023-06-30\",np)) set.seed(1) xt<-cumsum(sample(rnorm(1000,0,1), np, TRUE)) rev<-rnorm(np*4,0,.1) obs_values<-xt for(i in 1:4) {   xt<-xt+rev[(1+(i-1)*np):(i*np)]   obs_values<-c(obs_values,xt) } df<-data.frame(rev_date, time_period, obs_values)  ## Create vintage and test vintages<-create_vintages(df, periodicity = 4) #> Error in create_vintages.default(df, periodicity = 4): The function requires a data.frame, a matrix or a mts object! revisions<-get_revisions(vintages, gap=1) #> Error in eval(expr, envir, enclos): object 'vintages' not found orthogonallyModel1(revisions$diagonal_view) #> Error in eval(expr, envir, enclos): object 'revisions' not found"},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/orthogonallyModel2.html","id":null,"dir":"Reference","previous_headings":"","what":"Orthogonally Model 2 — orthogonallyModel2","title":"Orthogonally Model 2 — orthogonallyModel2","text":"Linear regression model R_v R_v-k (k = reference)","code":""},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/orthogonallyModel2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Orthogonally Model 2 — orthogonallyModel2","text":"","code":"orthogonallyModel2(revisions.view, reference = 1, na.zero = FALSE)"},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/orthogonallyModel2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Orthogonally Model 2 — orthogonallyModel2","text":"revisions.view mts object. Vertical diagonal view `get_revisions()` output reference Integer. Number lags consider. na.zero Boolean whether missing values considered 0 rather data (yet) available (default).","code":""},{"path":[]},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/orthogonallyModel2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Orthogonally Model 2 — orthogonallyModel2","text":"","code":"## Simulated data period_range<-seq(as.Date('2011-01-01'),as.Date('2020-10-01'),by='quarter') qtr<-(as.numeric(substr(period_range,6,7))+2)/3 time_period<-rep(paste0(format(period_range, \"%Y\"), \"Q\", qtr),5) np<-length(period_range) rev_date<-c(rep(\"2021-06-30\",np), rep(\"2021-12-31\",np), rep(\"2022-06-30\",np),             rep(\"2022-12-31\",np), rep(\"2023-06-30\",np)) set.seed(1) xt<-cumsum(sample(rnorm(1000,0,1), np, TRUE)) rev<-rnorm(np*4,0,.1) obs_values<-xt for(i in 1:4) {   xt<-xt+rev[(1+(i-1)*np):(i*np)]   obs_values<-c(obs_values,xt) } df<-data.frame(rev_date, time_period, obs_values)  ## Create vintage and test vintages<-create_vintages(df, periodicity = 4) #> Error in create_vintages.default(df, periodicity = 4): The function requires a data.frame, a matrix or a mts object! revisions<-get_revisions(vintages, gap=1) #> Error in eval(expr, envir, enclos): object 'vintages' not found orthogonallyModel2(revisions$diagonal_view) #> Error in eval(expr, envir, enclos): object 'revisions' not found"},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/plot.rjd3rev_revision_analysis.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot function for objects of class ","title":"Plot function for objects of class ","text":"Plot function objects class \"rjd3rev_revision_analysis\"","code":""},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/plot.rjd3rev_revision_analysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot function for objects of class ","text":"","code":"# S3 method for rjd3rev_revision_analysis plot(x, ...)"},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/plot.rjd3rev_revision_analysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot function for objects of class ","text":"x object class \"rjd3rev_revision_analysis\" ... arguments passed methods.","code":""},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/print.rjd3rev_revision_analysis.html","id":null,"dir":"Reference","previous_headings":"","what":"Print function for objects of class ","title":"Print function for objects of class ","text":"Print function objects class \"rjd3rev_revision_analysis\"","code":""},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/print.rjd3rev_revision_analysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print function for objects of class ","text":"","code":"# S3 method for rjd3rev_revision_analysis print(x, ...)"},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/print.rjd3rev_revision_analysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print function for objects of class ","text":"x object class \"rjd3rev_revision_analysis\" ... arguments passed methods.","code":""},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/revision_analysis.html","id":null,"dir":"Reference","previous_headings":"","what":"Revision analysis through a battery of tests — revision_analysis","title":"Revision analysis through a battery of tests — revision_analysis","text":"function perform parametric tests enable users detect potential bias (mean regression bias) sources inefficiency preliminary estimates. conclude inefficiency preliminary estimates revisions predictable way. results, parametric tests divided 5 categories: relevancy (check whether preliminary estimates even worth ), bias, efficiency, orthogonality (correlation higher lags), signalVSnoise. Descriptive statistics revisions also provided. parametric tests, prior transformation vintage data may important avoid misleading results. default, decision differentiate vintage data performed automatically based unit root co-integration tests whose results can found found results (section 'varbased'). Finally, running function `get_report()` output `revision_analysis()` give formatted summary results full explanations tests.","code":""},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/revision_analysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Revision analysis through a battery of tests — revision_analysis","text":"","code":"revision_analysis(   vintages,   gap = 1,   view = c(\"vertical\", \"diagonal\"),   n.releases = 3,   transf.diff = c(\"auto\", \"forced\", \"none\"),   transf.log = FALSE,   descriptive.rounding = 3,   nrevs = 1,   ref = 1,   na.zero = FALSE )"},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/revision_analysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Revision analysis through a battery of tests — revision_analysis","text":"vintages object class `\"rjd3rev_vintages\"` output function `create_vintages()` gap Integer. Gap consider vintages. Default 1 means revisions calculated tested vintages consecutively. view Selected view. Can \"vertical\" (default) \"diagonal\". Vertical view shows observed values time period different vintages. Diagonal view shows subsequent releases given time period, without regard date publication, can particularly informative regular estimation intervals exist. See `?create_vintages()` information interests drawbacks view. n.releases used `view = \"diagonal\"`. Ignored otherwise. Allow user limit number releases investigation). `view = \"vertical\"`, user invited limit number vintages upstream parameter `vintage.selection` `create_vintages()` whenever necessary. transf.diff differentiation apply data prior testing. used regressions including vintage data regressor /regressand. Regression including revision data never differentiated even `transf.diff = \"forced\"`. Options \"automatic\" (default), \"forced\" \"none\". transf.log Boolean whether log-transformation first applied data. Default FALSE. descriptive.rounding Integer. Number decimals display descriptive statistics. Default 3. nrevs, ref Integer. Number lags consider orthogonality tests 1 2 respectively. na.zero Boolean whether missing values considered 0 rather data yet available (default).","code":""},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/revision_analysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Revision analysis through a battery of tests — revision_analysis","text":"object class `\"rjd3rev_revision_analysis\"`","code":""},{"path":[]},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/revision_analysis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Revision analysis through a battery of tests — revision_analysis","text":"","code":"## Simulated data period_range<-seq(as.Date('2011-01-01'),as.Date('2020-10-01'),by='quarter') qtr<-(as.numeric(substr(period_range,6,7))+2)/3 time_period<-rep(paste0(format(period_range, \"%Y\"), \"Q\", qtr),5) np<-length(period_range) rev_date<-c(rep(\"2021-06-30\",np), rep(\"2021-12-31\",np), rep(\"2022-06-30\",np),             rep(\"2022-12-31\",np), rep(\"2023-06-30\",np)) set.seed(1) xt<-cumsum(sample(rnorm(1000,0,1), np, TRUE)) rev<-rnorm(np*4,0,.1) obs_values<-xt for(i in 1:4) {   xt<-xt+rev[(1+(i-1)*np):(i*np)]   obs_values<-c(obs_values,xt) } df<-data.frame(rev_date, time_period, obs_values)  ## Create a `\"rjd3rev_vintages\"` object with the input vintages<-create_vintages(df, periodicity = 4, revdate.format= \"%Y-%m-%d\") #> Error in create_vintages.default(df, periodicity = 4, revdate.format = \"%Y-%m-%d\"): The function requires a data.frame, a matrix or a mts object! # revisions<-get_revisions(vintages, gap = 1) # just to get a first insight of the revisions  ## Call using all default parameters rslt1<-revision_analysis(vintages) #> Error in eval(expr, envir, enclos): object 'vintages' not found #get_report(rslt1) #summary(rslt1) # formatted summary only  ## Calls using diagonal view (suited in many situations such as to evaluate GDP estimates) ## Note: when input are not growth rates but the gross series, differentiation is ## performed automatically (if transf.diff is let to its default option) but `transf.log` ## must be set to TRUE manually whenever a log-transformation of the data is necessary rslt2<-revision_analysis(vintages, gap = 1, view = \"diagonal\", n.releases = 3) #> Error in eval(expr, envir, enclos): object 'vintages' not found #get_report(rslt2) #summary(rslt2)  ## Call to evaluate revisions for a specific range of vintage periods vintages<-create_vintages(df, periodicity = 4, vintage.selection = list(start=\"2021-12-31\", end=\"2023-06-30\")) #> Error in create_vintages.default(df, periodicity = 4, vintage.selection = list(start = \"2021-12-31\",     end = \"2023-06-30\")): The function requires a data.frame, a matrix or a mts object! rslt3<-revision_analysis(vintages, gap=2, view = \"vertical\") #> Error in eval(expr, envir, enclos): object 'vintages' not found #get_report(rslt3) #summary(rslt3)"},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/signalnoise.html","id":null,"dir":"Reference","previous_headings":"","what":"Signal VS Noise — signalnoise","title":"Signal VS Noise — signalnoise","text":"Linear regression models determine whether revisions ‘news’ ‘noise’. 'noise': R (revisions) P (preliminary estimate). 'news': R L (latter estimate).","code":""},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/signalnoise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Signal VS Noise — signalnoise","text":"","code":"signalnoise(vintages.view, gap = 1, na.zero = FALSE)"},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/signalnoise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Signal VS Noise — signalnoise","text":"vintages.view mts object. Vertical diagonal view `create_vintages()` output gap Integer. Gap consider vintages. Default 1 means revisions calculated tested vintages consecutively. na.zero Boolean whether missing values considered 0 rather data (yet) available (default).","code":""},{"path":[]},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/signalnoise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Signal VS Noise — signalnoise","text":"","code":"## Simulated data period_range<-seq(as.Date('2011-01-01'),as.Date('2020-10-01'),by='quarter') qtr<-(as.numeric(substr(period_range,6,7))+2)/3 time_period<-rep(paste0(format(period_range, \"%Y\"), \"Q\", qtr),5) np<-length(period_range) rev_date<-c(rep(\"2021-06-30\",np), rep(\"2021-12-31\",np), rep(\"2022-06-30\",np),             rep(\"2022-12-31\",np), rep(\"2023-06-30\",np)) set.seed(1) xt<-cumsum(sample(rnorm(1000,0,1), np, TRUE)) rev<-rnorm(np*4,0,.1) obs_values<-xt for(i in 1:4) {   xt<-xt+rev[(1+(i-1)*np):(i*np)]   obs_values<-c(obs_values,xt) } df<-data.frame(rev_date, time_period, obs_values)  ## Create vintage and test vintages<-create_vintages(df, periodicity = 4) #> Error in create_vintages.default(df, periodicity = 4): The function requires a data.frame, a matrix or a mts object! signalnoise(vintages$diagonal_view) #> Error in eval(expr, envir, enclos): object 'vintages' not found"},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/slope_and_drift.html","id":null,"dir":"Reference","previous_headings":"","what":"Slope and Drift — slope_and_drift","title":"Slope and Drift — slope_and_drift","text":"Linear regression model latter vintage (L) preliminary vintage (P)","code":""},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/slope_and_drift.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Slope and Drift — slope_and_drift","text":"","code":"slope_and_drift(vintages.view, gap = 1, na.zero = FALSE)"},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/slope_and_drift.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Slope and Drift — slope_and_drift","text":"vintages.view mts object. Vertical diagonal view `create_vintages()` output gap Integer. Gap consider vintages. Default 1 means revisions calculated tested vintages consecutively. na.zero Boolean whether missing values considered 0 rather data (yet) available (default).","code":""},{"path":[]},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/slope_and_drift.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Slope and Drift — slope_and_drift","text":"","code":"## Simulated data period_range<-seq(as.Date('2011-01-01'),as.Date('2020-10-01'),by='quarter') qtr<-(as.numeric(substr(period_range,6,7))+2)/3 time_period<-rep(paste0(format(period_range, \"%Y\"), \"Q\", qtr),5) np<-length(period_range) rev_date<-c(rep(\"2021-06-30\",np), rep(\"2021-12-31\",np), rep(\"2022-06-30\",np),             rep(\"2022-12-31\",np), rep(\"2023-06-30\",np)) set.seed(1) xt<-cumsum(sample(rnorm(1000,0,1), np, TRUE)) rev<-rnorm(np*4,0,.1) obs_values<-xt for(i in 1:4) {   xt<-xt+rev[(1+(i-1)*np):(i*np)]   obs_values<-c(obs_values,xt) } df<-data.frame(rev_date, time_period, obs_values)  ## Create vintage and test vintages<-create_vintages(df, periodicity = 4) #> Error in create_vintages.default(df, periodicity = 4): The function requires a data.frame, a matrix or a mts object! slope_and_drift(vintages$diagonal_view) #> Error in eval(expr, envir, enclos): object 'vintages' not found"},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/summary.rjd3rev_revision_analysis.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary function for objects of class ","title":"Summary function for objects of class ","text":"Summary function objects class \"rjd3rev_revision_analysis\"","code":""},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/summary.rjd3rev_revision_analysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary function for objects of class ","text":"","code":"# S3 method for rjd3rev_revision_analysis summary(x)"},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/summary.rjd3rev_revision_analysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary function for objects of class ","text":"x object class \"rjd3rev_revision_analysis\"","code":""},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/theil.html","id":null,"dir":"Reference","previous_headings":"","what":"Theil's Inequality Coefficient U1 — theil","title":"Theil's Inequality Coefficient U1 — theil","text":"Theil's Inequality Coefficient U1","code":""},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/theil.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theil's Inequality Coefficient U1 — theil","text":"","code":"theil(vintages.view, gap = 1, na.zero = FALSE)"},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/theil.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Theil's Inequality Coefficient U1 — theil","text":"vintages.view mts object. Vertical diagonal view `create_vintages()` output gap Integer. Gap consider vintages. Default 1 means revisions calculated tested vintages consecutively. na.zero Boolean whether missing values considered 0 rather data (yet) available (default).","code":""},{"path":[]},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/theil.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Theil's Inequality Coefficient U1 — theil","text":"","code":"## Simulated data period_range<-seq(as.Date('2011-01-01'),as.Date('2020-10-01'),by='quarter') qtr<-(as.numeric(substr(period_range,6,7))+2)/3 time_period<-rep(paste0(format(period_range, \"%Y\"), \"Q\", qtr),5) np<-length(period_range) rev_date<-c(rep(\"2021-06-30\",np), rep(\"2021-12-31\",np), rep(\"2022-06-30\",np),             rep(\"2022-12-31\",np), rep(\"2023-06-30\",np)) set.seed(1) xt<-cumsum(sample(rnorm(1000,0,1), np, TRUE)) rev<-rnorm(np*4,0,.1) obs_values<-xt for(i in 1:4) {   xt<-xt+rev[(1+(i-1)*np):(i*np)]   obs_values<-c(obs_values,xt) } df<-data.frame(rev_date, time_period, obs_values)  ## Create vintage and test vintages<-create_vintages(df, periodicity = 4) #> Error in create_vintages.default(df, periodicity = 4): The function requires a data.frame, a matrix or a mts object! theil(vintages$diagonal_view) #> Error in eval(expr, envir, enclos): object 'vintages' not found"},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/theil2.html","id":null,"dir":"Reference","previous_headings":"","what":"Theil's Inequality Coefficient U2 — theil2","title":"Theil's Inequality Coefficient U2 — theil2","text":"Theil's Inequality Coefficient U2","code":""},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/theil2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theil's Inequality Coefficient U2 — theil2","text":"","code":"theil2(vintages.view, gap = 1, na.zero = FALSE)"},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/theil2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Theil's Inequality Coefficient U2 — theil2","text":"vintages.view mts object. Vertical diagonal view `create_vintages()` output gap Integer. Gap consider vintages. Default 1 means revisions calculated tested vintages consecutively.. na.zero Boolean whether missing values considered 0 rather data (yet) available (default).","code":""},{"path":[]},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/theil2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Theil's Inequality Coefficient U2 — theil2","text":"","code":"## Simulated data period_range<-seq(as.Date('2011-01-01'),as.Date('2020-10-01'),by='quarter') qtr<-(as.numeric(substr(period_range,6,7))+2)/3 time_period<-rep(paste0(format(period_range, \"%Y\"), \"Q\", qtr),5) np<-length(period_range) rev_date<-c(rep(\"2021-06-30\",np), rep(\"2021-12-31\",np), rep(\"2022-06-30\",np),             rep(\"2022-12-31\",np), rep(\"2023-06-30\",np)) set.seed(1) xt<-cumsum(sample(rnorm(1000,0,1), np, TRUE)) rev<-rnorm(np*4,0,.1) obs_values<-xt for(i in 1:4) {   xt<-xt+rev[(1+(i-1)*np):(i*np)]   obs_values<-c(obs_values,xt) } df<-data.frame(rev_date, time_period, obs_values)  ## Create vintage and test vintages<-create_vintages(df, periodicity = 4) #> Error in create_vintages.default(df, periodicity = 4): The function requires a data.frame, a matrix or a mts object! theil2(vintages$diagonal_view) #> Error in eval(expr, envir, enclos): object 'vintages' not found"},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/unitroot.html","id":null,"dir":"Reference","previous_headings":"","what":"Unit root test — unitroot","title":"Unit root test — unitroot","text":"Unit root test","code":""},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/unitroot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unit root test — unitroot","text":"","code":"unitroot(vintages.view, adfk = 1, na.zero = FALSE)"},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/unitroot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unit root test — unitroot","text":"vintages.view mts object. Vertical diagonal view `create_vintages()` output adfk Number lags consider Augmented Dicky-Fuller (ADF) test na.zero Boolean whether missing values considered 0 rather data (yet) available (default).","code":""},{"path":[]},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/unitroot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unit root test — unitroot","text":"","code":"## Simulated data period_range<-seq(as.Date('2011-01-01'),as.Date('2020-10-01'),by='quarter') qtr<-(as.numeric(substr(period_range,6,7))+2)/3 time_period<-rep(paste0(format(period_range, \"%Y\"), \"Q\", qtr),5) np<-length(period_range) rev_date<-c(rep(\"2021-06-30\",np), rep(\"2021-12-31\",np), rep(\"2022-06-30\",np),             rep(\"2022-12-31\",np), rep(\"2023-06-30\",np)) set.seed(1) xt<-cumsum(sample(rnorm(1000,0,1), np, TRUE)) rev<-rnorm(np*4,0,.1) obs_values<-xt for(i in 1:4) {   xt<-xt+rev[(1+(i-1)*np):(i*np)]   obs_values<-c(obs_values,xt) } df<-data.frame(rev_date, time_period, obs_values)  ## Create vintage and test vintages<-create_vintages(df, periodicity = 4) #> Error in create_vintages.default(df, periodicity = 4): The function requires a data.frame, a matrix or a mts object! unitroot(vintages$diagonal_view) #> Error in eval(expr, envir, enclos): object 'vintages' not found"},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/vecm.html","id":null,"dir":"Reference","previous_headings":"","what":"Vector error correction model (VECM) — vecm","title":"Vector error correction model (VECM) — vecm","text":"Can lead better understanding nature nonstationary process among different component series.","code":""},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/vecm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vector error correction model (VECM) — vecm","text":"","code":"vecm(   vintages.view,   lag = 2,   model = c(\"none\", \"cnt\", \"trend\"),   na.zero = FALSE )"},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/vecm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vector error correction model (VECM) — vecm","text":"vintages.view mts object. Vertical diagonal view `create_vintages()` output lag Number lags model Character. Must \"none\" (default), \"cnt\" \"trend\". na.zero Boolean whether missing values considered 0 rather data (yet) available (default).","code":""},{"path":"https://rjdemetra.github.io/rjd3revisions/reference/vecm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vector error correction model (VECM) — vecm","text":"","code":"## Simulated data period_range<-seq(as.Date('2011-01-01'),as.Date('2020-10-01'),by='quarter') qtr<-(as.numeric(substr(period_range,6,7))+2)/3 time_period<-rep(paste0(format(period_range, \"%Y\"), \"Q\", qtr),5) np<-length(period_range) rev_date<-c(rep(\"2021-06-30\",np), rep(\"2021-12-31\",np), rep(\"2022-06-30\",np),             rep(\"2022-12-31\",np), rep(\"2023-06-30\",np)) set.seed(1) xt<-cumsum(sample(rnorm(1000,0,1), np, TRUE)) rev<-rnorm(np*4,0,.1) obs_values<-xt for(i in 1:4) {   xt<-xt+rev[(1+(i-1)*np):(i*np)]   obs_values<-c(obs_values,xt) } df<-data.frame(rev_date, time_period, obs_values)  ## Create vintage and test vintages<-create_vintages(df, periodicity = 4) #> Error in create_vintages.default(df, periodicity = 4): The function requires a data.frame, a matrix or a mts object! vecm(vintages$diagonal_view) #> Error in eval(expr, envir, enclos): object 'vintages' not found"}]
